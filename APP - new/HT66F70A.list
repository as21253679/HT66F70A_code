				;file C:\Users\bet\Desktop\APP - new\UART.c
				;1	#include <HT66F70A.h>
				;2	//#define LED_Port  _pc								
				;3	//#define LED_PortC _pcc	
				;4	typedef	unsigned char	u8;
				;5	typedef	char			s8;
				;6	typedef	unsigned short	u16;
				;7	typedef	short			s16;
				;8	typedef	unsigned long	u32;
				;9	typedef	long			s32;
				;10	void PC_TX(char da);
				;11	char PC_RX();
				;12	void UART_init();
				;13	
				;14	extern char output[];
				;15	char output1[4]={'0','1'};
				;16	#define T2 205  //baudrate  9600=4M/4/T => T=104
				;17	#define PE1_Rx  _pe0
				;18	#define PE0_Tx  _pe1
				;19	char output[50];
				;20	void rx_string();
				;21	void tx_string(char data[]);
				;22	void GPIO_init();
				;23	void Delay100us(u16);							//函式原型宣告
				;24	char e[2];
				;25	char kk;
				;26	int flag,i;
				;27	void main()
				;28	{
				@code .SECTION 'CODE'
				include HT66F70A.inc
0000	1F0B	clr     BP
0001	28EC	jmp     _main_startup1
				@start .SECTION 'CODE'
				end_startup_value:
010C	0F00	mov     a, 0H
010D	008B	mov     BP, a
010E	295A	jmp     _main
010F	0000	nop
0110	0000	nop
0111	0000	nop
0112	0000	nop
				L0113:
0113	0000	nop
				L0114:
0114	0000	nop
				L0115:
0115	0000	nop
0116	1785	sdz     ACC
0117	2915	jmp     L0115
0118	0003	ret
				;29		_Bool stop = 0;
				;30		UART_init();
				_main:
				_main:
015A	2016	call    _UART_init
				;31		_wdtc=0b10101111;							//關閉看們狗計時器
015B	0FAF	mov     a, AFH
015C	00BE	mov     WDTC, a
				;32	//	LED_PortC=0;	      						//設定LED_Port為輸出模式	   
				;33	//	_adcr0=0b00000011;							//選擇AN1做轉換,設定轉換結果存放格式
				;34	//	_adcr1=0b00000110;							//A/D Clock=fSYS/64,VREFS=0
				;35	//	_pas1=0b00110000;							//設定PA1為AN1 A/D通道
				;36		_ade=1; _emi=1;		//啟動ADC中斷與中斷總開關 
015D	31B1	set     ADE
015E	3030	set     EMI
				;37	//	_start=1; 
				;38	//	_start=0;	
				;39			
				;40		while(1)
				;41		{	
				;42			kk=PC_RX();
				_L40:
015F	213A	call    _L18
0160	4092	mov     _main_2, a
0161	409B	mov     kk[0], a
				;43			if(kk=='X')
0162	4712	mov     a, _main_2
0163	0A58	sub     a, 58H
0164	390A	snz     Z
0165	2970	jmp     _L41
				;44			{
				;45				flag=0;
0166	5F17	clr     flag[0]
0167	5F18	clr     flag[1]
				;46				_adcr0=0b00000001;
0168	0F01	mov     a, 1H
0169	00E8	mov     ADCR0, a
				;47				_adcr1=0b00000110;
016A	0F06	mov     a, 6H
016B	00E9	mov     ADCR1, a
				;48				_pas0=0b00110000;
016C	0F30	mov     a, 30H
016D	80E0	lmov    PAS0, a
016F	297E	jmp     _L45
				;49				_ade=1;
				;50				_start=1; 
				;51				_start=0;
				;52			//	PC_TX(e[3]);
				;53			//	Delay100us(1000);
				;54			//	PC_TX(e[2]);
				;55			//	Delay100us(1000);
				;56				PC_TX(e[1]);
				;57				Delay100us(1000);
				;58				PC_TX(e[0]);
				;59				PC_TX('A');
				;60	
				;61			Delay100us(1000);
				;62			}	
				;63			else if(kk=='C') 
				_L41:
0170	4712	mov     a, _main_2
0171	0A43	sub     a, 43H
0172	390A	snz     Z
0173	298B	jmp     _L43
				;64			{
				;65				flag=1;
0174	0F01	mov     a, 1H
0175	4097	mov     flag[0], a
0176	5F18	clr     flag[1]
				;66				_adcr0=0b00000011;
0177	0F03	mov     a, 3H
0178	00E8	mov     ADCR0, a
				;67				_adcr1=0b00000110;
0179	0F06	mov     a, 6H
017A	00E9	mov     ADCR1, a
				;68				_pas1=0b00110000;
017B	0F30	mov     a, 30H
017C	80E1	lmov    PAS1, a
				;69				_ade=1;
				_L45:
017E	31B1	set     ADE
				;70				_start=1; 
017F	33E8	set     START
				;71				_start=0;
0180	37E8	clr     START
				;72			//	PC_TX(e[3]);
				;73			//	Delay100us(1000);
				;74			//	PC_TX(e[2]);
				;75			//	Delay100us(1000);
				;76				PC_TX(e[1]);
0181	471A	mov     a, e[1]
0182	2119	call    _PC_TX
				;77				Delay100us(1000);
0183	0FE8	mov     a, E8H
0184	4089	mov     del, a
0185	0F03	mov     a, 3H
0186	408A	mov     del[1], a
0187	2002	call    _Delay100us
				;78				PC_TX(e[0]);
0188	4719	mov     a, e[0]
0189	2119	call    _PC_TX
018A	298E	jmp     _L44
				;79				PC_TX('A');
				;80	
				;81			Delay100us(1000);
				;82			}
				;83			else
				;84			{
				;85				flag=2;
				_L43:
018B	0F02	mov     a, 2H
018C	4097	mov     flag[0], a
018D	5F18	clr     flag[1]
				;86				PC_TX('A');
				_L44:
018E	0F41	mov     a, 41H
018F	2119	call    _PC_TX
				;87				Delay100us(1000);
0190	0FE8	mov     a, E8H
0191	4089	mov     del, a
0192	0F03	mov     a, 3H
0193	408A	mov     del[1], a
0194	2002	call    _Delay100us
0195	295F	jmp     _L40
0196	2996	jmp     $
				L0197:
0197	5F0F	clr     del[6]
0198	7B8A	snz     del[1].7
0199	29A0	jmp     L01A0
019A	4189	cpl     del
019B	418A	cpl     del[1]
019C	5489	inc     del
019D	3D0A	sz      Z
019E	548A	inc     del[1]
019F	558F	dec     del[6]
				L01A0:
01A0	7B8C	snz     del[3].7
01A1	29A9	jmp     L01A9
01A2	418B	cpl     del[2]
01A3	418C	cpl     del[3]
01A4	548B	inc     del[2]
01A5	3D0A	sz      Z
01A6	548C	inc     del[3]
01A7	548F	inc     del[6]
01A8	548F	inc     del[6]
				L01A9:
01A9	5F0D	clr     del[4]
01AA	5F0E	clr     del[5]
01AB	0F10	mov     a, 10H
01AC	4090	mov     del[7], a
				L01AD:
01AD	340A	clr     C
01AE	5A89	rlc     del
01AF	5A8A	rlc     del[1]
01B0	5A8D	rlc     del[4]
01B1	5A8E	rlc     del[5]
01B2	470D	mov     a, del[4]
01B3	420B	sub     a, del[2]
01B4	470E	mov     a, del[5]
01B5	520C	sbc     a, del[3]
01B6	380A	snz     C
01B7	29BD	jmp     L01BD
01B8	408E	mov     del[5], a
01B9	470D	mov     a, del[4]
01BA	420B	sub     a, del[2]
01BB	408D	mov     del[4], a
01BC	5489	inc     del
				L01BD:
01BD	5790	sdz     del[7]
01BE	29AD	jmp     L01AD
01BF	780F	snz     del[6].0
01C0	29C6	jmp     L01C6
				@dummy .SECTION 'CODE'
01C1	418D	cpl     del[4]
01C2	418E	cpl     del[5]
01C3	548D	inc     del[4]
01C4	3D0A	sz      Z
01C5	548E	inc     del[5]
				L01C6:
01C6	788F	snz     del[6].1
01C7	29CD	jmp     L01CD
01C8	4189	cpl     del
01C9	418A	cpl     del[1]
01CA	5489	inc     del
01CB	3D0A	sz      Z
01CC	548A	inc     del[1]
				L01CD:
01CD	0003	ret
				;88			}
				;89			
				;90		}
				;91	}
				;92	DEFINE_ISR(ISR_ADC,0x1C)
				;93	{	
				@ISR_ADC_code .SECTION 'CODE'
001C	4083	mov     r11c, a
001D	070B	mov     a, BP
001E	1F0B	clr     BP
001F	2820	jmp     _ISR_ADC
				_ISR_ADC:
				_ISR_ADC:
				@dummy28 .SECTION 'CODE'
0020	4084	mov     r21c, a
0021	070A	mov     a, STATUS
0022	40D0	mov     r31c, a
0023	0703	mov     a, MP1L
0024	40D1	mov     r41c, a
0025	0704	mov     a, MP1H
0026	40D2	mov     r51c, a
0027	0707	mov     a, TBLP
0028	40D3	mov     r61c, a
0029	0709	mov     a, TBHP
002A	40D4	mov     r71c, a
				;94		int d=0,dd=0,ddd=0;
				;95		_start=1; 
002B	33E8	set     START
				;96		_start=0;						//起始ADC轉換
002C	37E8	clr     START
				;97		Delay100us(1000);		
002D	0FE8	mov     a, E8H
002E	4089	mov     del, a
002F	0F03	mov     a, 3H
0030	408A	mov     del[1], a
0031	2002	call    _Delay100us
				;98		if(flag==0)
0032	4717	mov     a, flag[0]
0033	4085	mov     rb1c, a
0034	4718	mov     a, flag[1]
0035	4086	mov     rc1c, a
0036	4705	mov     a, rb1c
0037	4506	or      a, rc1c
0038	390A	snz     Z
0039	287D	jmp     _L8
				;99		{
				;100			d=_adrh;
003A	076B	mov     a, ADRH
003B	4087	mov     rd1c, a
003C	5F08	clr     re1c
				;101			d=(d<<2);
0048	340A	clr     C
0049	5A87	rlc     rd1c
004A	5A88	rlc     re1c
004B	340A	clr     C
004C	5A87	rlc     rd1c
004D	5A88	rlc     re1c
				;102			dd=_adrl;
003D	076A	mov     a, ADRL
003E	4085	mov     rb1c, a
003F	5F06	clr     rc1c
				;103			dd=(dd>>6);
0040	0F06	mov     a, 6H
				_LI1:
0041	340A	clr     C
0042	7F86	sz      rc1c.7
0043	300A	set     C
0044	5B86	rrc     rc1c
0045	5B85	rrc     rb1c
0046	1785	sdz     ACC
0047	2841	jmp     _LI1
				;104			ddd=d+dd;
004E	4707	mov     a, rd1c
004F	4385	addm    a, rb1c
0050	4708	mov     a, re1c
0051	5386	adcm    a, rc1c
				;105			e[1]=ddd/100+48;
0052	4705	mov     a, rb1c
0053	4089	mov     del, a
0054	4706	mov     a, rc1c
0055	408A	mov     del[1], a
0056	0F64	mov     a, 64H
0057	408B	mov     del[2], a
0058	0F00	mov     a, 0H
0059	408C	mov     del[3], a
005A	2197	call    L0197
005B	4709	mov     a, del
005C	4087	mov     rd1c, a
005D	470A	mov     a, del[1]
005E	4088	mov     re1c, a
005F	4707	mov     a, rd1c
0060	0B30	add     a, 30H
0061	409A	mov     e[1], a
				;106			ddd=ddd-(ddd/100)*100;
0062	4705	mov     a, rb1c
0063	4089	mov     del, a
0064	4706	mov     a, rc1c
0065	408A	mov     del[1], a
0066	0F64	mov     a, 64H
0067	408B	mov     del[2], a
0068	0F00	mov     a, 0H
0069	408C	mov     del[3], a
006A	2197	call    L0197
006B	470D	mov     a, del[4]
006C	4085	mov     rb1c, a
006D	470E	mov     a, del[5]
006E	4086	mov     rc1c, a
				;107			if(ddd>=100)
				;108				e[0]=57;
				;109			else
				;110				e[0]=ddd/10+48;
006F	4705	mov     a, rb1c
0070	4089	mov     del, a
0071	4706	mov     a, rc1c
0072	408A	mov     del[1], a
0073	0F0A	mov     a, AH
0074	408B	mov     del[2], a
0075	0F00	mov     a, 0H
0076	408C	mov     del[3], a
0077	2197	call    L0197
0078	4709	mov     a, del
0079	4085	mov     rb1c, a
007A	470A	mov     a, del[1]
007B	4086	mov     rc1c, a
007C	28BD	jmp     _L10
				;111		}
				;112		else if(flag==1)
				_L8:
007D	4705	mov     a, rb1c
007E	0C01	xor     a, 1H
007F	4506	or      a, rc1c
0080	390A	snz     Z
0081	28C0	jmp     _L9
				;113		{
				;114			d=_adrh<<4;
0086	076B	mov     a, ADRH
0087	4085	mov     rb1c, a
0088	5F06	clr     rc1c
0089	0F04	mov     a, 4H
				_LI2:
008A	340A	clr     C
008B	5A85	rlc     rb1c
008C	5A86	rlc     rc1c
008D	1785	sdz     ACC
008E	288A	jmp     _LI2
				;115				
				;116			dd=_adrl>>4;
0082	116A	swapa   ADRL
0083	0E0F	and     a, FH
0084	4087	mov     rd1c, a
0085	5F08	clr     re1c
				;117				
				;118			ddd=d+dd;
008F	4707	mov     a, rd1c
0090	4385	addm    a, rb1c
0091	4708	mov     a, re1c
0092	5386	adcm    a, rc1c
				;119			ddd=(ddd/400);
0093	4705	mov     a, rb1c
0094	4089	mov     del, a
0095	4706	mov     a, rc1c
0096	408A	mov     del[1], a
0097	0F90	mov     a, 90H
0098	408B	mov     del[2], a
0099	0F01	mov     a, 1H
009A	408C	mov     del[3], a
009B	2197	call    L0197
009C	4709	mov     a, del
009D	4085	mov     rb1c, a
009E	470A	mov     a, del[1]
009F	4086	mov     rc1c, a
				;120		//  e[3]=ddd/1000+48;
				;121		//	ddd=ddd-(ddd/1000)*1000;
				;122	    //	e[2]=ddd/100+48;
				;123	    //	ddd=ddd-(ddd/100)*100;
				;124			e[1]=ddd/10+48;
00A0	4705	mov     a, rb1c
00A1	4089	mov     del, a
00A2	4706	mov     a, rc1c
00A3	408A	mov     del[1], a
00A4	0F0A	mov     a, AH
00A5	408B	mov     del[2], a
00A6	0F00	mov     a, 0H
00A7	408C	mov     del[3], a
00A8	2197	call    L0197
00A9	4709	mov     a, del
00AA	4087	mov     rd1c, a
00AB	470A	mov     a, del[1]
00AC	4088	mov     re1c, a
00AD	4707	mov     a, rd1c
00AE	0B30	add     a, 30H
00AF	409A	mov     e[1], a
				;125			ddd=ddd-(ddd/10)*10;
00B0	4705	mov     a, rb1c
00B1	4089	mov     del, a
00B2	4706	mov     a, rc1c
00B3	408A	mov     del[1], a
00B4	0F0A	mov     a, AH
00B5	408B	mov     del[2], a
00B6	0F00	mov     a, 0H
00B7	408C	mov     del[3], a
00B8	2197	call    L0197
00B9	470D	mov     a, del[4]
00BA	4085	mov     rb1c, a
00BB	470E	mov     a, del[5]
00BC	4086	mov     rc1c, a
				;126			e[0]=ddd+48;
				_L10:
00BD	4705	mov     a, rb1c
00BE	0B30	add     a, 30H
00BF	4099	mov     e[0], a
				;127		}
				;128		
				;129		_ade=0;
				_L9:
00C0	35B1	clr     ADE
00C1	4704	mov     a, r21c
00C2	008B	mov     BP, a
00C3	4750	mov     a, r31c
00C4	008A	mov     STATUS, a
00C5	4751	mov     a, r41c
00C6	0083	mov     MP1L, a
00C7	4752	mov     a, r51c
00C8	0084	mov     MP1H, a
00C9	4753	mov     a, r61c
00CA	0087	mov     TBLP, a
00CB	4754	mov     a, r71c
00CC	0089	mov     TBHP, a
00CD	1D05	tabrd   ACC
00CE	4703	mov     a, r11c
00CF	0004	reti
				startup_value:
				@ROMDATA_BASE .SECTION 'CODE'
00D0	0004	reti
00D1	0093	mov     PAC, a
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
00D2	3130	set     INT1E
				org	0ech
				;130	}
				;131	void Delay100us(u16 del)						//延遲del*200指令週期
				;132	{	u16 i,j;									//@fSYS=8MH,延遲del*100us
				;133		for(i=0;i<del;i++)
				_Delay100us:
				_Delay100us:
0002	5F01	clr     rb
0003	5F02	clr     rc
				_L2:
0004	4701	mov     a, rb
0005	4209	sub     a, del[0]
0006	4702	mov     a, rc
0007	520A	sbc     a, del[1]
0008	3F0A	sz      CZ
0009	2815	jmp     _L1
000A	5F00	clr     ra
0011	5481	inc     rb
0012	3D0A	sz      Z
0013	5482	inc     rc
0014	2804	jmp     _L2
				_L1:
0015	0003	ret
				;134			for(j=0;j<=25;j++) GCC_NOP();
				_L5:
000B	0000	nop
000C	5480	inc     ra
000D	4700	mov     a, ra
000E	0A1A	sub     a, 1AH
000F	390A	snz     Z
0010	280B	jmp     _L5
				;135	}
				;136	
				;137	
				;138	
				;139	
				;140	void Delayms(u16 del)
				;141	{	
				;142		u16 i;									//@fSYS=8MH,延遲del*1ms
				;143		for(i=0;i<del;i++) GCC_DELAY(2000);		//內建函式，延遲2000指令週期
				;144	}
				;145	void GPIO_init()
				;146	{
				;147		//_pcpu1 = 1;		//  PC1 設定提升電阻
				;148		//_pcc1 = 1;		//	PC1 設定輸入
				;149	
				;150	}
				;151	
				;152	void UART_init()
				;153	{
				;154		_pec1 = 0;	
				_UART_init:
				_UART_init:
0016	34A3	clr     PEC1
				;155		_pec0 = 1;		//UART腳位方向規劃		0=OUT 1=IN
0017	3023	set     PEC0
0018	0003	ret
0019	0000	nop
001A	0000	nop
001B	0000	nop
				;156	}
				;157	
				;158	char PC_RX()//baudrate=9600  PE1
				;159	{
				;160		u8 i=0,buff=0;   //資料計數=0，從頭開始
014A	5F00	clr     ra
				;161		while(PE1_Rx);    //等待接收啟始位元
				_L18:
				_PC_RX:
				_PC_RX:
013A	3C22	sz      PE0
013B	293A	jmp     _L18
				;162		GCC_DELAY(T2);     //啟始位元等待1-bit時間
013C	0F31	mov     a, 31H
013D	340B	clr     BP0
013E	348B	clr     BP1
013F	2114	call    L0114
0140	340B	clr     BP0
0141	348B	clr     BP1
				;163		GCC_DELAY(T2/2);  //啟始位元再等待1/2-bit時間令資料線上信號較穩定 
0142	0F17	mov     a, 17H
0143	340B	clr     BP0
0144	348B	clr     BP1
0145	2113	call    L0113
0146	340B	clr     BP0
0147	348B	clr     BP1
0148	0F08	mov     a, 8H
0149	4081	mov     rb, a
				;164		for(i=0; i<8; i++)  //接收8-bit串列資料
				;165		{
				;166			buff=buff >> 1;  //資料緩衝右移1個bit
				_L21:
014B	340A	clr     C
014C	5B80	rrc     ra
				;167			if(PE1_Rx)  buff=buff | 0x80;//若接收的bit=1，則令資料的bit7=1
014D	3822	snz     PE0
014E	2950	jmp     _L19
014F	7380	set     ra.7
				;168			GCC_DELAY(T2-15);  //等待一段時間，接收下一個bit
				_L19:
0150	0F2D	mov     a, 2DH
0151	340B	clr     BP0
0152	348B	clr     BP1
0153	2113	call    L0113
0154	340B	clr     BP0
0155	348B	clr     BP1
0156	5781	sdz     rb
0157	294B	jmp     _L21
				;169		}
				;170		return buff;
				;171	}
0158	4700	mov     a, ra
0159	0003	ret
				;172	void rx_string()
				;173	{
				;174		char w=0;
				;175		for(w=0;w<10;w++)
				;176		{
				;177			output[w] = (char)(PC_RX() & 0x7f);
				;178			if(output[w]==13) break;
				;179		}
				;180	}
				;181	void PC_TX(char da)//baudrate=9600  PE0
				;182	{
				_PC_TX:
				_PC_TX:
0119	4091	mov     da[0], a
				;183		u8 i=0;   //資料計數=0，從頭開始
				;184		char buff=da; //讀取列表資料，同時資料計數加一
				;185		PE0_Tx=0; GCC_DELAY(T2);   //發射啟始位元     
011A	34A2	clr     PE1
011B	0F31	mov     a, 31H
011C	340B	clr     BP0
011D	348B	clr     BP1
011E	2114	call    L0114
011F	340B	clr     BP0
0120	348B	clr     BP1
0121	0F08	mov     a, 8H
0122	4080	mov     ra, a
				;186		for(i=0; i<8; i++)    //發射8-bit串列資料
				;187		{
				;188			if(buff & 0x01) PE0_Tx=1; //若buff資料bit0=1則發射1
				L0123:
0123	7811	snz     da[0].0
0124	2927	jmp     L0127
0125	30A2	set     PE1
0126	2928	jmp     L0128
				;189			else  PE0_Tx=0;         //若buff資料bit0=0則發射0
				L0127:
0127	34A2	clr     PE1
				;190			buff >>= 1;           //資料右移換下1個bit
				L0128:
0128	5A11	rlca    da[0]
0129	5B91	rrc     da[0]
				;191			GCC_DELAY(T2-15);           //延時
012A	0F2D	mov     a, 2DH
012B	340B	clr     BP0
012C	348B	clr     BP1
012D	2113	call    L0113
012E	340B	clr     BP0
012F	348B	clr     BP1
0130	5780	sdz     ra
0131	2923	jmp     L0123
				;192		}
				;193		PE0_Tx=1; GCC_DELAY(T2);      //發射停止位元
0132	30A2	set     PE1
0133	0F31	mov     a, 31H
0134	340B	clr     BP0
0135	348B	clr     BP1
0136	2114	call    L0114
0137	340B	clr     BP0
0138	348B	clr     BP1
0139	0003	ret
				;194	}
				;195	void tx_string(char data[])	
				;196	{
				;197		char test=0;
				;198		for(test=0;test<=8;test++)
				;199		{
				;200			PC_TX(data[test]);
				;201		}
				;202	}
				;file C:\Users\bet\Desktop\APP - new\startup1_l.asm
				;1	;;--------------------------------------------------------------;;
				;2	;;    This file is part of the Holtek C Compiler V3 package     ;;
				;3	;;    For the initialization of static linkage variables        ;;
				;4	;;    Copyright (C) 2013 Holtek Semiconductor Inc.              ;;
				;5	;;    Version: 1.04 (Above IDE3000 V7.72)                       ;;
				;6	;;    Date:    2013/12/04                                        ;;
				;7	;;--------------------------------------------------------------;;
				;8	
				;9	acc equ [05h]
				;10	tblp equ [07h]
				;11	tblh equ [08h]
				;12	;;tbhp equ [09h] 
				;13	mp0 equ [01h]
				;14	r1 equ [02h]
				;15	mp1l equ [03h]
				;16	mp1h equ [04h]
				;17	z equ [0ah].2
				;18	c equ [0ah].0
				;19	
				;20	ifndef tbhp
				;21	tbhp equ [09h]
				;22	endif
				;23	 
				;24	extern startup_value_1:near
				;25	
				;26	@start .section 'code'
				;27	begin_startup_value:
				;28	  mov a,low (offset startup_value_1) 
				_main_startup1:
				@start .SECTION 'CODE'
				begin_startup_value:
				@start .SECTION 'CODE'
00EC	0FCF	mov     a, CFH
				;29	  mov tblp,a
00ED	0087	mov     TBLP, a
				;30	  mov a,high (offset startup_value_1) 
00EE	0F00	mov     a, 0H
				;31	  mov tbhp,a
00EF	0089	mov     TBHP, a
				;32	next_table:
				;33	  ;CLR WDT
				;34	  inc tblp
				next_table:
00F0	1487	inc     TBLP
				;35	  sz z
00F1	3D0A	sz      Z
				;36	  inc tbhp
00F2	1489	inc     TBHP
				;37	  tabrdc mp0
00F3	1D01	tabrd   MP0
				;38	  sz mp0
00F4	1081	sz      MP0
				;39	  jmp read_data
00F5	28F7	jmp     read_data
				;40	  jmp end_startup_value
00F6	290C	jmp     end_startup_value
				;41	read_data:
				;42	  inc tblp
				read_data:
00F7	1487	inc     TBLP
				;43	  sz z
00F8	3D0A	sz      Z
				;44	  inc tbhp
00F9	1489	inc     TBHP
				;45	  tabrdc mp1l
00FA	1D03	tabrd   MP1L
				;46	  mov a,tblh
00FB	0708	mov     a, TBLH
				;47	  mov mp1h,a
00FC	0084	mov     MP1H, a
				;48	next_data:
				;49	  inc tblp
				next_data:
00FD	1487	inc     TBLP
				;50	  sz z
00FE	3D0A	sz      Z
				;51	  inc tbhp
00FF	1489	inc     TBHP
				;52	  tabrdc acc
0100	1D05	tabrd   ACC
				;53	  mov r1,a
0101	0082	mov     [02H], a
				;54	  sdz mp0
0102	1781	sdz     MP0
				;55	  jmp $+2
0103	2905	jmp     L0105
				;56	  jmp next_table
0104	28F0	jmp     next_table
				;57	  inc mp1l
				L0105:
0105	1483	inc     MP1L
				;58	  mov a,tblh
0106	0708	mov     a, TBLH
				;59	  mov r1,a
0107	0082	mov     [02H], a
				;60	  inc mp1l
0108	1483	inc     MP1L
				;61	  sdz mp0
0109	1781	sdz     MP0
				;62	  jmp next_data
010A	28FD	jmp     next_data
				;63	  jmp next_table
010B	28F0	jmp     next_table
				;64	
				;65	end_startup_value:
				;66	
				;67	   
				;68	@ROMDATA_BASE .SECTION com_l 'CODE'  
				;69	startup_value:
				;70	;;linker range the initial value table here
				data .SECTION 'DATA'
				__pe DB DUP (?) ; __pe
				__pec DB DUP (?) ; __pec
				__intc0 DB DUP (?) ; __intc0
				__intc1 DB DUP (?) ; __intc1
				__wdtc DB DUP (?) ; __wdtc
				__adcr0 DB DUP (?) ; __adcr0
				__adcr1 DB DUP (?) ; __adcr1
				__adrl DB DUP (?) ; __adrl
				__adrh DB DUP (?) ; __adrh
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				r11c DB DUP (?)
				r21c DB DUP (?)
				rb1c DB DUP (?)
				rc1c DB DUP (?)
				rd1c DB DUP (?)
				re1c DB DUP (?)
				del DB 2 DUP (?) ; del
				da DB DUP (?) ; da
				_main_2 DB DUP (?)
				output1 DB DUP (?) ; output1
				flag DB 2 DUP (?) ; flag
				e DB DUP (?) ; e
				kk DB DUP (?) ; kk
				i DB 2 DUP (?) ; i
				output DB DUP (?) ; output
				r31c DB DUP (?)
				r41c DB DUP (?)
				r51c DB DUP (?)
				r61c DB DUP (?)
				r71c DB DUP (?)
				__pas0 DB DUP (?) ; __pas0
				__pas1 DB DUP (?) ; __pas1
