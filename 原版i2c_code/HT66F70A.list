				;file C:\Users\bet\Desktop\學姐i2c_code\HT66F70A.c
				;1	#include <HT66F70A.h>
				;2	#include "MyType.H"
				;3	
				;4	#define PE1_Rx  _pe1
				;5	void PC_TX(char da);
				;6	void tx_string(char data[])	;
				;7	void UART_init();
				;8	void delay(double del);
				;9	//以下為I2C的部分
				;10	int RxFlag;//接收期標
				;11	int DeviceFlag;//裝置期標
				;12	#define	SCLC _pac5		//DEFINE SCL CONTROL BIT,PAC5
				;13	#define	SDAC _pac4		//DEFINE SDA CONTROL BIT,PAC4
				;14	/*efine	SCL  _pa5	                //DEFINE SCL SIGNAL PIN,PA5
				;15	#define	SDA  _pa4		        //DEFINE SCL SIGNAL PIN,PA4*/
				;16	#define	Voltage 0x09
				;17	
				;18	unsigned char RxData;//接收資料
				;19	#define I2CSCK _pa5
				;20	#define I2CSDA _pa4
				;21	#define I2cCtrl _pbc
				;22	void i2cStart();
				;23	void i2cStop();
				;24	void i2cRestart();
				;25	void i2cSendHeight();
				;26	void i2cSendLow();
				;27	void i2cAck();
				;28	void i2cNack();
				;29	void i2cSendData(unsigned char i2cData);
				;30	unsigned char i2cGetData();
				;31	void i2cWrite(unsigned char i2cAddress , unsigned char i2cRegister , unsigned char i2cData);
				;32	unsigned char i2cRead(unsigned char i2cAddress , unsigned char i2cRegister);
				;33	
				;34	//以上為I2C的部分
				;35	
				;36	extern char output[];
				;37	char output1[4]={'0','1'};
				;38	
				;39	void Delayms(u16 del)
				;40	{	
				;41		u16 i;									//@fSYS=8MH,延遲del*1ms
				;42		for(i=0;i<del;i++) GCC_DELAY(2000);		//內建函式，延遲2000指令週期
				_Delayms:
				_Delayms:
02BF	5F01	clr     rb
02C0	5F02	clr     rc
02C1	2ACD	jmp     _L2
				_L3:
02C2	0F01	mov     a, 1H
02C3	4097	mov     da, a
02C4	0FF1	mov     a, F1H
02C5	340B	clr     BP0
02C6	348B	clr     BP1
02C7	20BA	call    L00BA
02C8	340B	clr     BP0
02C9	348B	clr     BP1
02CA	5481	inc     rb
02CB	3D0A	sz      Z
02CC	5482	inc     rc
				_L2:
02CD	4701	mov     a, rb
02CE	4218	sub     a, del[0]
02CF	4702	mov     a, rc
02D0	5219	sbc     a, del[1]
02D1	3B0A	snz     CZ
02D2	2AC2	jmp     _L3
02D3	0003	ret
				;43	}
				;44	void GPIO_init()
				;45	{
				;46		_pcpu1 = 1;		//  PC1 設定提升電阻
				_GPIO_init:
				_GPIO_init:
02D4	3099	set     PCPU1
				;47		_pcc1 = 1;		//	PC1 設定輸入
02D5	309B	set     PCC1
02D6	0003	ret
				startup_value:
				@ROMDATA_BASE .SECTION 'CODE'
02D7	0004	reti
02D8	00A2	mov     PE, a
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
02D9	3130	set     INT1E
				;48	}
				;49	
				;50	void main()
				;51	
				;52	{
				@code .SECTION 'CODE'
				include HT66F70A.inc
0000	1F0B	clr     BP
0001	2802	jmp     begin_startup_value
				end_startup_value:
				@start .SECTION 'CODE'
0022	0F00	mov     a, 0H
0023	008B	mov     BP, a
0024	2A42	jmp     _main
				L0025:
0025	5A0F	rlca    rg[9]
0026	5A15	rlca    rg[15]
0027	5A8B	rlc     rg[5]
0028	4090	mov     rg[10], a
0029	5F15	clr     rg[15]
002A	738F	set     rg[9].7
002B	5090	sz      rg[10]
002C	2830	jmp     L0030
002D	5F0D	clr     rg[7]
002E	5F0E	clr     rg[8]
002F	5F0F	clr     rg[9]
				L0030:
0030	5A09	rlca    rg[3]
0031	5A14	rlca    rg[14]
0032	5A8B	rlc     rg[5]
0033	408A	mov     rg[4], a
0034	5F14	clr     rg[14]
0035	7389	set     rg[3].7
0036	508A	sz      rg[4]
0037	0003	ret
				L0038:
0038	5F07	clr     rg[1]
0039	5F08	clr     rg[2]
003A	5F09	clr     rg[3]
				L003B:
003B	5F14	clr     rg[14]
003C	0003	ret
				L003D:
003D	0F80	mov     a, 80H
003E	4495	xorm    a, rg[15]
				L003F:
003F	2025	call    L0025
				L0040:
0040	4710	mov     a, rg[10]
0041	420A	sub     a, rg[4]
0042	3D0A	sz      Z
0043	2854	jmp     L0054
0044	380A	snz     C
0045	284D	jmp     L004D
0046	340A	clr     C
0047	5B94	rrc     rg[14]
0048	5B89	rrc     rg[3]
0049	5B88	rrc     rg[2]
004A	5B87	rrc     rg[1]
004B	548A	inc     rg[4]
004C	2840	jmp     L0040
				L004D:
004D	340A	clr     C
004E	5B95	rrc     rg[15]
004F	5B8F	rrc     rg[9]
0050	5B8E	rrc     rg[8]
0051	5B8D	rrc     rg[7]
0052	5490	inc     rg[10]
0053	2840	jmp     L0040
				L0054:
0054	590B	rra     rg[5]
0055	440B	xor     a, rg[5]
0056	3805	snz     ACC.0
0057	2863	jmp     L0063
0058	418D	cpl     rg[7]
0059	418E	cpl     rg[8]
005A	418F	cpl     rg[9]
005B	4195	cpl     rg[15]
005C	548D	inc     rg[7]
005D	3D0A	sz      Z
005E	548E	inc     rg[8]
005F	3D0A	sz      Z
0060	548F	inc     rg[9]
0061	3D0A	sz      Z
0062	5495	inc     rg[15]
				L0063:
0063	470D	mov     a, rg[7]
0064	4387	addm    a, rg[1]
0065	470E	mov     a, rg[8]
0066	5388	adcm    a, rg[2]
0067	470F	mov     a, rg[9]
0068	5389	adcm    a, rg[3]
0069	4715	mov     a, rg[15]
006A	5394	adcm    a, rg[14]
006B	7B94	snz     rg[14].7
006C	287B	jmp     L007B
006D	4187	cpl     rg[1]
006E	4188	cpl     rg[2]
006F	4189	cpl     rg[3]
0070	4194	cpl     rg[14]
0071	5487	inc     rg[1]
0072	3D0A	sz      Z
0073	5488	inc     rg[2]
0074	3D0A	sz      Z
0075	5489	inc     rg[3]
0076	3D0A	sz      Z
0077	5494	inc     rg[14]
0078	0F01	mov     a, 1H
0079	448B	xorm    a, rg[5]
007A	287B	jmp     L007B
				L007B:
007B	508A	sz      rg[4]
007C	287E	jmp     L007E
007D	2838	jmp     L0038
				L007E:
007E	5094	sz      rg[14]
007F	2895	jmp     L0095
0080	4707	mov     a, rg[1]
0081	4508	or      a, rg[2]
0082	4509	or      a, rg[3]
0083	3D0A	sz      Z
0084	283B	jmp     L003B
				L0085:
0085	7F89	sz      rg[3].7
0086	28A6	jmp     L00A6
0087	578A	sdz     rg[4]
0088	288B	jmp     L008B
0089	700C	set     rg[6].0
008A	2838	jmp     L0038
				L008B:
008B	340A	clr     C
008C	5A87	rlc     rg[1]
008D	5A88	rlc     rg[2]
008E	5A89	rlc     rg[3]
008F	2885	jmp     L0085
				L0090:
0090	340A	clr     C
0091	5B94	rrc     rg[14]
0092	5B89	rrc     rg[3]
0093	5B88	rrc     rg[2]
0094	5B87	rrc     rg[1]
				L0095:
0095	548A	inc     rg[4]
0096	560A	siza    rg[4]
0097	289A	jmp     L009A
0098	708C	set     rg[6].1
0099	28AF	jmp     L00AF
				L009A:
009A	5714	sdza    rg[14]
009B	2890	jmp     L0090
009C	300A	set     C
009D	5387	adcm    a, rg[1]
009E	5388	adcm    a, rg[2]
009F	5389	adcm    a, rg[3]
00A0	3C0A	sz      C
00A1	548A	inc     rg[4]
00A2	5B94	rrc     rg[14]
00A3	5B89	rrc     rg[3]
00A4	5B88	rrc     rg[2]
00A5	5B87	rrc     rg[1]
				L00A6:
00A6	508A	sz      rg[4]
00A7	28A9	jmp     L00A9
00A8	2838	jmp     L0038
				L00A9:
00A9	5B8B	rrc     rg[5]
00AA	5B0A	rrca    rg[4]
00AB	4094	mov     rg[14], a
00AC	380A	snz     C
00AD	7789	clr     rg[3].7
00AE	0003	ret
				L00AF:
00AF	5F87	set     rg[1]
00B0	5F88	set     rg[2]
00B1	5F89	set     rg[3]
00B2	5F94	set     rg[14]
00B3	780B	snz     rg[5].0
00B4	7794	clr     rg[14].7
00B5	0003	ret
00B6	0000	nop
00B7	0000	nop
00B8	0000	nop
00B9	0000	nop
				L00BA:
00BA	0000	nop
				L00BB:
00BB	0000	nop
00BC	1785	sdz     ACC
00BD	28BB	jmp     L00BB
				L00BE:
00BE	0000	nop
00BF	1785	sdz     ACC
00C0	28BE	jmp     L00BE
00C1	5797	sdz     da
00C2	28BE	jmp     L00BE
00C3	0003	ret
				;53		
				;54	_Bool stop = 0;
				;55	_wdtc=0b10101111;						//關閉看門狗計時器  
				_main:
				_main:
0242	0FAF	mov     a, AFH
0243	00BE	mov     WDTC, a
				;56	UART_init();
0244	223F	call    _UART_init
				;57		
				;58	_sima=0b11000000;
0245	0FC0	mov     a, C0H
0246	00EF	mov     SIMC2, a
				;59	RxFlag=0;
0247	5F27	clr     RxFlag[0]
0248	5F28	clr     RxFlag[1]
				;60	
				;61	
				;62	 while(1)
				;63	   { 
				;64	   	//	i2cSendData((0x16 << 1 | 0x00));
				;65	     i2cWrite(0x38<<1,0x70,0b00101111);
				_L29:
0249	0F2F	mov     a, 2FH
024A	40A0	mov     i2cAddress, a
024B	0F70	mov     a, 70H
024C	409F	mov     i2cRegister, a
024D	0F70	mov     a, 70H
024E	222D	call    _i2cWrite
				;66	    // RxData=i2cRead(0x38,0x71);
				;67	     
				;68	     
				;69	     PC_TX(0x0d);
024F	0F0D	mov     a, DH
0250	220C	call    _PC_TX
				;70	     
				;71	     RxData=i2cRead(0x38<<1,0x71);
0251	0F71	mov     a, 71H
0252	409F	mov     i2cRegister, a
0253	0F70	mov     a, 70H
0254	21E7	call    _i2cRead
0255	4080	mov     ra, a
0256	4700	mov     a, ra
0257	40A6	mov     RxData[0], a
				;72	     
				;73	     PC_TX(RxData);
0258	4700	mov     a, ra
0259	220C	call    _PC_TX
				;74	     PC_TX('d');
025A	0F64	mov     a, 64H
025B	220C	call    _PC_TX
				;75	     
				;76	     RxData=i2cRead(0x39<<1,0x73);
025C	0F73	mov     a, 73H
025D	409F	mov     i2cRegister, a
025E	0F72	mov     a, 72H
025F	21E7	call    _i2cRead
0260	4080	mov     ra, a
0261	4700	mov     a, ra
0262	40A6	mov     RxData[0], a
				;77	     
				;78	     PC_TX(RxData);
0263	4700	mov     a, ra
0264	220C	call    _PC_TX
				;79	     PC_TX('f');
0265	0F66	mov     a, 66H
0266	220C	call    _PC_TX
0267	2A49	jmp     _L29
0268	2A68	jmp     $
0269	1483	inc     MP1L
				L026A:
026A	0702	mov     a, [02H]
026B	0003	ret
				;80	  
				;81	   }
				;82	   
				;83	 	
				;84	}
				;85	
				;86	/*void  delay(void)
				;87	{
				;88		_nop();
				;89		_nop();_nop();_nop();_nop();
				;90		_nop();	_nop();_nop();_nop();
				;91		_nop();	_nop();_nop();_nop();
				;92		_nop();	_nop();_nop();_nop();
				;93	}*/
				;94	void delay(double del)
				;95	{	
				;96		double j;					        //@fSYS=8MH,延遲del*1ms
				;97		for(j=0;j<del;j++) GCC_DELAY(2000);		//內建函式，延遲2000指令週期
				_delay:
				_delay:
00C4	5F03	clr     rd
00C5	5F04	clr     re
00C6	5F05	clr     rf
00C7	5F06	clr     rg
00C8	28EA	jmp     _L7
				_L8:
00C9	0F01	mov     a, 1H
00CA	4097	mov     da, a
00CB	0FF1	mov     a, F1H
00CC	340B	clr     BP0
00CD	348B	clr     BP1
00CE	20BA	call    L00BA
00CF	340B	clr     BP0
00D0	348B	clr     BP1
00D1	4706	mov     a, rg
00D2	4094	mov     rg[14], a
00D3	4705	mov     a, rf
00D4	4089	mov     rg[3], a
00D5	4704	mov     a, re
00D6	4088	mov     rg[2], a
00D7	4703	mov     a, rd
00D8	4087	mov     rg[1], a
00D9	0F3F	mov     a, 3FH
00DA	4095	mov     rg[15], a
00DB	0F80	mov     a, 80H
00DC	408F	mov     rg[9], a
00DD	0F00	mov     a, 0H
00DE	408E	mov     rg[8], a
00DF	0F00	mov     a, 0H
00E0	408D	mov     rg[7], a
00E1	203F	call    L003F
00E2	4714	mov     a, rg[14]
00E3	4086	mov     rg, a
00E4	4709	mov     a, rg[3]
00E5	4085	mov     rf, a
00E6	4708	mov     a, rg[2]
00E7	4084	mov     re, a
00E8	4707	mov     a, rg[1]
00E9	4083	mov     rd, a
				_L7:
00EA	4706	mov     a, rg
00EB	4094	mov     rg[14], a
00EC	4705	mov     a, rf
00ED	4089	mov     rg[3], a
00EE	4704	mov     a, re
00EF	4088	mov     rg[2], a
00F0	4703	mov     a, rd
00F1	4087	mov     rg[1], a
00F2	471B	mov     a, del[3]
00F3	4095	mov     rg[15], a
00F4	471A	mov     a, del[2]
00F5	408F	mov     rg[9], a
00F6	4719	mov     a, del[1]
00F7	408E	mov     rg[8], a
00F8	4718	mov     a, del[0]
00F9	408D	mov     rg[7], a
00FA	203D	call    L003D
00FB	7F94	sz      rg[14].7
00FC	28C9	jmp     _L8
00FD	0003	ret
				;98	}
				;99	void i2cStart()
				;100	{ SCLC=0;
				_i2cStart:
				_i2cStart:
01BC	3693	clr     PAC5
				;101	  SDAC=0;
01BD	3613	clr     PAC4
				;102		/*I2CSCK = 1;
				;103		delay(0.001);
				;104		I2CSDA = 1;
				;105	    delay(0.001);
				;106		I2CSDA = 0;
				;107	    delay(0.001);
				;108		I2CSCK = 0;
				;109	    delay(0.001);*/
				;110	    
				;111	    	I2CSDA = 1;
01BE	3212	set     PA4
				;112		delay(0.001);
01BF	0F6F	mov     a, 6FH
01C0	4098	mov     data, a
01C1	0F12	mov     a, 12H
01C2	4099	mov     data[1], a
01C3	0F83	mov     a, 83H
01C4	409A	mov     data[2], a
01C5	0F3A	mov     a, 3AH
01C6	409B	mov     test, a
01C7	20C4	call    _delay
				;113		I2CSCK = 1;
01C8	3292	set     PA5
				;114		delay(0.001);
01C9	0F6F	mov     a, 6FH
01CA	4098	mov     data, a
01CB	0F12	mov     a, 12H
01CC	4099	mov     data[1], a
01CD	0F83	mov     a, 83H
01CE	409A	mov     data[2], a
01CF	0F3A	mov     a, 3AH
01D0	409B	mov     test, a
01D1	20C4	call    _delay
				;115		I2CSDA = 0;
01D2	3612	clr     PA4
				;116		delay(0.001);
01D3	0F6F	mov     a, 6FH
01D4	4098	mov     data, a
01D5	0F12	mov     a, 12H
01D6	4099	mov     data[1], a
01D7	0F83	mov     a, 83H
01D8	409A	mov     data[2], a
01D9	0F3A	mov     a, 3AH
01DA	409B	mov     test, a
01DB	20C4	call    _delay
				;117		I2CSCK = 0;
01DC	3692	clr     PA5
				;118		delay(0.001);
01DD	0F6F	mov     a, 6FH
01DE	4098	mov     data, a
01DF	0F12	mov     a, 12H
01E0	4099	mov     data[1], a
01E1	0F83	mov     a, 83H
01E2	409A	mov     data[2], a
01E3	0F3A	mov     a, 3AH
01E4	409B	mov     test, a
01E5	20C4	call    _delay
01E6	0003	ret
				;119		
				;120	}
				;121	
				;122	void i2cStop()
				;123	{
				;124		SDAC = 0;	// set SDA as output
				_i2cStop:
				_i2cStop:
00FE	3613	clr     PAC4
				;125		SCLC = 0;	// set SCL as output
00FF	3693	clr     PAC5
				;126		
				;127		/*I2CSCK = 1;
				;128	    delay(0.001);	
				;129		I2CSDA = 0;
				;130		delay(0.001);
				;131		I2CSDA = 1;
				;132	    delay(0.001);*/
				;133	    
				;134	    I2CSDA = 0;
0100	3612	clr     PA4
				;135	    I2CSCK = 0;
0101	3692	clr     PA5
				;136		delay(0.001);
0102	0F6F	mov     a, 6FH
0103	4098	mov     data, a
0104	0F12	mov     a, 12H
0105	4099	mov     data[1], a
0106	0F83	mov     a, 83H
0107	409A	mov     data[2], a
0108	0F3A	mov     a, 3AH
0109	409B	mov     test, a
010A	20C4	call    _delay
				;137		I2CSCK = 1;
010B	3292	set     PA5
				;138		delay(0.001);
010C	0F6F	mov     a, 6FH
010D	4098	mov     data, a
010E	0F12	mov     a, 12H
010F	4099	mov     data[1], a
0110	0F83	mov     a, 83H
0111	409A	mov     data[2], a
0112	0F3A	mov     a, 3AH
0113	409B	mov     test, a
0114	20C4	call    _delay
				;139		I2CSDA = 1;
0115	3212	set     PA4
				;140		delay(0.001);
0116	0F6F	mov     a, 6FH
0117	4098	mov     data, a
0118	0F12	mov     a, 12H
0119	4099	mov     data[1], a
011A	0F83	mov     a, 83H
011B	409A	mov     data[2], a
011C	0F3A	mov     a, 3AH
011D	409B	mov     test, a
011E	20C4	call    _delay
011F	0003	ret
				;141	    
				;142	}
				;143	
				;144	void i2cReStart()
				;145	{
				;146		i2cStart();
01F4	21BC	call    _i2cStart
				_i2cReStart:
				_i2cReStart:
02BD	21BC	call    _i2cStart
02BE	0003	ret
				;147	}
				;148	
				;149	void i2cSendHeight()//nack
				;150	{
				;151		SCLC=0;
				_i2cSendHeight:
				_i2cSendHeight:
0120	3693	clr     PAC5
				;152	  SDAC=0;
0121	3613	clr     PAC4
				;153	  
				;154		I2CSCK = 0;
0122	3692	clr     PA5
				;155		delay(0.001);
0123	0F6F	mov     a, 6FH
0124	4098	mov     data, a
0125	0F12	mov     a, 12H
0126	4099	mov     data[1], a
0127	0F83	mov     a, 83H
0128	409A	mov     data[2], a
0129	0F3A	mov     a, 3AH
012A	409B	mov     test, a
012B	20C4	call    _delay
				;156		I2CSDA = 1;//(i2cData & i2cmask)不等於0=資料線輸出高為元
012C	3212	set     PA4
				;157		delay(0.001);
012D	0F6F	mov     a, 6FH
012E	4098	mov     data, a
012F	0F12	mov     a, 12H
0130	4099	mov     data[1], a
0131	0F83	mov     a, 83H
0132	409A	mov     data[2], a
0133	0F3A	mov     a, 3AH
0134	409B	mov     test, a
0135	20C4	call    _delay
				;158		I2CSCK = 1;
0136	3292	set     PA5
				;159	    delay(0.001);
0137	0F6F	mov     a, 6FH
0138	4098	mov     data, a
0139	0F12	mov     a, 12H
013A	4099	mov     data[1], a
013B	0F83	mov     a, 83H
013C	409A	mov     data[2], a
013D	0F3A	mov     a, 3AH
013E	409B	mov     test, a
013F	20C4	call    _delay
				;160		I2CSCK = 0;
0140	3692	clr     PA5
				;161		delay(0.001);
0141	0F6F	mov     a, 6FH
0142	4098	mov     data, a
0143	0F12	mov     a, 12H
0144	4099	mov     data[1], a
0145	0F83	mov     a, 83H
0146	409A	mov     data[2], a
0147	0F3A	mov     a, 3AH
0148	409B	mov     test, a
0149	20C4	call    _delay
014A	0003	ret
				;162	}
				;163	
				;164	void i2cSendLow()//ack
				;165	{
				;166	  SCLC=0;
				_i2cSendLow:
				_i2cSendLow:
0179	3693	clr     PAC5
				;167	  SDAC=0;
017A	3613	clr     PAC4
				;168	  
				;169		I2CSCK = 0;
017B	3692	clr     PA5
				;170		delay(0.001);
017C	0F6F	mov     a, 6FH
017D	4098	mov     data, a
017E	0F12	mov     a, 12H
017F	4099	mov     data[1], a
0180	0F83	mov     a, 83H
0181	409A	mov     data[2], a
0182	0F3A	mov     a, 3AH
0183	409B	mov     test, a
0184	20C4	call    _delay
				;171		I2CSDA = 0;//(i2cData & i2cmask)等於0= 資料線輸出低為元
0185	3612	clr     PA4
				;172	    delay(0.001);
0186	0F6F	mov     a, 6FH
0187	4098	mov     data, a
0188	0F12	mov     a, 12H
0189	4099	mov     data[1], a
018A	0F83	mov     a, 83H
018B	409A	mov     data[2], a
018C	0F3A	mov     a, 3AH
018D	409B	mov     test, a
018E	20C4	call    _delay
				;173		I2CSCK = 1;
018F	3292	set     PA5
				;174	    delay(0.001);
0190	0F6F	mov     a, 6FH
0191	4098	mov     data, a
0192	0F12	mov     a, 12H
0193	4099	mov     data[1], a
0194	0F83	mov     a, 83H
0195	409A	mov     data[2], a
0196	0F3A	mov     a, 3AH
0197	409B	mov     test, a
0198	20C4	call    _delay
				;175		I2CSCK = 0;
0199	3692	clr     PA5
				;176		delay(0.001);
019A	0F6F	mov     a, 6FH
019B	4098	mov     data, a
019C	0F12	mov     a, 12H
019D	4099	mov     data[1], a
019E	0F83	mov     a, 83H
019F	409A	mov     data[2], a
01A0	0F3A	mov     a, 3AH
01A1	409B	mov     test, a
01A2	20C4	call    _delay
01A3	0003	ret
				;177	}
				;178	
				;179	void i2cAck()
				;180	{
				;181		i2cSendLow();
				_i2cAck:
				_i2cAck:
01A4	2179	call    _i2cSendLow
01A5	0003	ret
				;182	}
				;183	
				;184	void i2cNack()
				;185	{
				;186		i2cSendHeight();
01FE	2120	call    _i2cSendHeight
				_i2cNack:
				_i2cNack:
02BB	2120	call    _i2cSendHeight
02BC	0003	ret
				;187	}
				;188	
				;189	void i2cSendData(unsigned char i2cData)
				;190	{
				_i2cSendData:
				_i2cSendData:
01A6	409C	mov     i2cData[0], a
				;191		unsigned char i2cmask = 0x80;
01AA	0F80	mov     a, 80H
01AB	409D	mov     i2cmask[0], a
				;192		SDAC = 0;	// set SDA as output
01A7	3613	clr     PAC4
				;193		SCLC = 0;
01A8	3693	clr     PAC5
01A9	5F1E	clr     i2cmask[1]
				;194		do
				;195		{
				;196			//	I2CSDA=i2cData & i2cmask;
				;197			((i2cData & i2cmask) != 0) ? i2cSendHeight() : i2cSendLow();
				L01AC:
01AC	471D	mov     a, i2cmask[0]
01AD	461C	and     a, i2cData[0]
01AE	4080	mov     ra, a
01AF	5E00	snz     ra
01B0	29B3	jmp     L01B3
01B1	2120	call    _i2cSendHeight
01B2	29B4	jmp     L01B4
				L01B3:
01B3	2179	call    _i2cSendLow
				;198			i2cmask >>= 1;
				L01B4:
01B4	340A	clr     C
01B5	5B9D	rrc     i2cmask[0]
01B6	549E	inc     i2cmask[1]
				;199		}
				;200		while(i2cmask);
01B7	471E	mov     a, i2cmask[1]
01B8	0A08	sub     a, 8H
01B9	390A	snz     Z
01BA	29AC	jmp     L01AC
01BB	0003	ret
				;201	}
				;202	
				;203	unsigned char i2cGetData()
				;204	{
				;205		unsigned char i2cmask = 0x80;
014F	0F80	mov     a, 80H
0150	409D	mov     i2cmask[0], a
				;206		unsigned char i2creaddata = 0x00;
014E	5F1C	clr     i2creaddata[0]
				;207		_pac4=1;
				_i2cGetData:
				_i2cGetData:
014B	3213	set     PAC4
				;208		I2CSDA = 1;
014C	3212	set     PA4
014D	5F1E	clr     i2cmask[1]
				;209		do
				;210		{
				;211			I2CSCK = 0;
				_L24:
0151	3692	clr     PA5
				;212			delay(0.001);
0152	0F6F	mov     a, 6FH
0153	4098	mov     data, a
0154	0F12	mov     a, 12H
0155	4099	mov     data[1], a
0156	0F83	mov     a, 83H
0157	409A	mov     data[2], a
0158	0F3A	mov     a, 3AH
0159	409B	mov     test, a
015A	20C4	call    _delay
				;213		
				;214	// 		i2creaddata = (I2CSDA == 1) ? i2creaddata | i2cmask : i2creaddata | 0x00;
				;215			i2creaddata |= (I2CSDA == 1) ? i2creaddata | i2cmask : i2creaddata | 0x00;
015B	3A12	snz     PA4
015C	2961	jmp     _L25
015D	471C	mov     a, i2creaddata[0]
015E	451D	or      a, i2cmask[0]
015F	4080	mov     ra, a
0160	2963	jmp     _L22
				_L25:
0161	471C	mov     a, i2creaddata[0]
0162	4080	mov     ra, a
				_L22:
0163	4700	mov     a, ra
0164	459C	orm     a, i2creaddata[0]
				;216			I2CSCK = 1;
0165	3292	set     PA5
				;217		delay(0.001);
0166	0F6F	mov     a, 6FH
0167	4098	mov     data, a
0168	0F12	mov     a, 12H
0169	4099	mov     data[1], a
016A	0F83	mov     a, 83H
016B	409A	mov     data[2], a
016C	0F3A	mov     a, 3AH
016D	409B	mov     test, a
016E	20C4	call    _delay
				;218			i2cmask >>= 1;
016F	340A	clr     C
0170	5B9D	rrc     i2cmask[0]
0171	549E	inc     i2cmask[1]
				;219		}	while(i2cmask);
0172	471E	mov     a, i2cmask[1]
0173	0A08	sub     a, 8H
0174	390A	snz     Z
0175	2951	jmp     _L24
				;220		_pbc2=0;
0176	3517	clr     PBC2
				;221		return i2creaddata;
				;222	
				;223	}
0177	471C	mov     a, i2creaddata[0]
0178	0003	ret
				;224	
				;225	void i2cWrite(unsigned char i2cAddress , unsigned char i2cRegister , unsigned char i2cData)
				;226	{
				_i2cWrite:
				_i2cWrite:
022D	40A1	mov     i2cAddress[0], a
				;227		i2cStart();
022E	21BC	call    _i2cStart
				;228		i2cSendData((i2cAddress << 1 | 0x00));
022F	4721	mov     a, i2cAddress[0]
0230	4321	add     a, i2cAddress[0]
0231	4080	mov     ra, a
0232	4700	mov     a, ra
0233	21A6	call    _i2cSendData
				;229		i2cAck();
0234	21A4	call    _i2cAck
				;230		i2cSendData(i2cRegister);
0235	471F	mov     a, i2cRegister[0]
0236	21A6	call    _i2cSendData
				;231		i2cAck();
0237	21A4	call    _i2cAck
				;232		i2cSendData(i2cData);
0238	4720	mov     a, i2cData[0]
0239	4080	mov     ra, a
023A	4700	mov     a, ra
023B	21A6	call    _i2cSendData
				;233		i2cAck();
023C	21A4	call    _i2cAck
				;234		i2cStop();
023D	20FE	call    _i2cStop
023E	0003	ret
				;235	}
				;236	
				;237	
				;238	unsigned char i2cRead(unsigned char i2cAddress , unsigned char i2cRegister)
				;239	{
				_i2cRead:
				_i2cRead:
01E7	40A0	mov     i2cAddress[0], a
				;240		unsigned char i2creaddata = 0x00;
				;241		SDAC = 0;	// set SDA as output
01E8	3613	clr     PAC4
				;242		SCLC = 0;	
01E9	3693	clr     PAC5
				;243		i2cStart();
01EA	21BC	call    _i2cStart
				;244	
				;245		i2cSendData((i2cAddress << 1 | 0x00));
01EB	4720	mov     a, i2cAddress[0]
01EC	4320	add     a, i2cAddress[0]
01ED	4080	mov     ra, a
01EE	4700	mov     a, ra
01EF	21A6	call    _i2cSendData
				;246	// 	i2cSendData(00111000);
				;247		i2cAck();
01F0	21A4	call    _i2cAck
				;248		i2cSendData(i2cRegister);
01F1	471F	mov     a, i2cRegister[0]
01F2	21A6	call    _i2cSendData
				;249		i2cAck();
01F3	21A4	call    _i2cAck
				;250		i2cReStart();
				;251		i2cSendData((i2cAddress << 1 | 0x01));
01F5	4720	mov     a, i2cAddress[0]
01F6	4320	add     a, i2cAddress[0]
01F7	4080	mov     ra, a
01F8	7000	set     ra.0
01F9	4700	mov     a, ra
01FA	21A6	call    _i2cSendData
				;252	// 	i2cSendData(00111001);
				;253		i2cAck();
01FB	21A4	call    _i2cAck
				;254		i2creaddata = i2cGetData();
01FC	214B	call    _i2cGetData
01FD	40A1	mov     i2creaddata[0], a
				;255	    i2cNack();
				;256		i2cStop();
01FF	20FE	call    _i2cStop
				;257		return i2creaddata;
				;258	}
0200	4721	mov     a, i2creaddata[0]
0201	0003	ret
0202	0000	nop
0203	0000	nop
0204	0000	nop
0205	0000	nop
				L0206:
0206	0000	nop
				L0207:
0207	0000	nop
				L0208:
0208	0000	nop
0209	1785	sdz     ACC
020A	2A08	jmp     L0208
020B	0003	ret
				;file C:\Users\bet\Desktop\學姐i2c_code\startup1_l.asm
				;1	;;--------------------------------------------------------------;;
				;2	;;    This file is part of the Holtek C Compiler V3 package     ;;
				;3	;;    For the initialization of static linkage variables        ;;
				;4	;;    Copyright (C) 2013 Holtek Semiconductor Inc.              ;;
				;5	;;    Version: 1.04 (Above IDE3000 V7.72)                       ;;
				;6	;;    Date:    2013/12/04                                        ;;
				;7	;;--------------------------------------------------------------;;
				;8	
				;9	acc equ [05h]
				;10	tblp equ [07h]
				;11	tblh equ [08h]
				;12	;;tbhp equ [09h] 
				;13	mp0 equ [01h]
				;14	r1 equ [02h]
				;15	mp1l equ [03h]
				;16	mp1h equ [04h]
				;17	z equ [0ah].2
				;18	c equ [0ah].0
				;19	
				;20	ifndef tbhp
				;21	tbhp equ [09h]
				;22	endif
				;23	 
				;24	extern startup_value_1:near
				;25	
				;26	@start .section 'code'
				;27	begin_startup_value:
				;28	  mov a,low (offset startup_value_1) 
				begin_startup_value:
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0002	0FD6	mov     a, D6H
				;29	  mov tblp,a
0003	0087	mov     TBLP, a
				;30	  mov a,high (offset startup_value_1) 
0004	0F02	mov     a, 2H
				;31	  mov tbhp,a
0005	0089	mov     TBHP, a
				;32	next_table:
				;33	  ;CLR WDT
				;34	  inc tblp
				next_table:
0006	1487	inc     TBLP
				;35	  sz z
0007	3D0A	sz      Z
				;36	  inc tbhp
0008	1489	inc     TBHP
				;37	  tabrdc mp0
0009	1D01	tabrd   MP0
				;38	  sz mp0
000A	1081	sz      MP0
				;39	  jmp read_data
000B	280D	jmp     read_data
				;40	  jmp end_startup_value
000C	2822	jmp     end_startup_value
				;41	read_data:
				;42	  inc tblp
				read_data:
000D	1487	inc     TBLP
				;43	  sz z
000E	3D0A	sz      Z
				;44	  inc tbhp
000F	1489	inc     TBHP
				;45	  tabrdc mp1l
0010	1D03	tabrd   MP1L
				;46	  mov a,tblh
0011	0708	mov     a, TBLH
				;47	  mov mp1h,a
0012	0084	mov     MP1H, a
				;48	next_data:
				;49	  inc tblp
				next_data:
0013	1487	inc     TBLP
				;50	  sz z
0014	3D0A	sz      Z
				;51	  inc tbhp
0015	1489	inc     TBHP
				;52	  tabrdc acc
0016	1D05	tabrd   ACC
				;53	  mov r1,a
0017	0082	mov     [02H], a
				;54	  sdz mp0
0018	1781	sdz     MP0
				;55	  jmp $+2
0019	281B	jmp     L001B
				;56	  jmp next_table
001A	2806	jmp     next_table
				;57	  inc mp1l
				L001B:
001B	1483	inc     MP1L
				;58	  mov a,tblh
001C	0708	mov     a, TBLH
				;59	  mov r1,a
001D	0082	mov     [02H], a
				;60	  inc mp1l
001E	1483	inc     MP1L
				;61	  sdz mp0
001F	1781	sdz     MP0
				;62	  jmp next_data
0020	2813	jmp     next_data
				;63	  jmp next_table
0021	2806	jmp     next_table
				;64	
				;65	end_startup_value:
				;66	
				;67	   
				;68	@ROMDATA_BASE .SECTION com_l 'CODE'  
				;69	startup_value:
				;70	;;linker range the initial value table here
				;file C:\Users\bet\Desktop\學姐i2c_code\UART.c
				;1	#include <HT66F70A.h>
				;2	#include "MyType.H"
				;3	
				;4	#define T2 205  //baudrate  9600=4M/4/T => T=104
				;5	#define PE1_Rx  _pe1
				;6	#define PE0_Tx  _pe0
				;7	
				;8	char output[50];
				;9	
				;10	char PC_RX();
				;11	void UART_init();
				;12	void rx_string();
				;13	void PC_TX(char da);
				;14	void tx_string(char data[]);
				;15	
				;16	void UART_init()
				;17	{
				;18		_pec0 = 0;	
				_UART_init:
				_UART_init:
023F	3423	clr     PEC0
				;19		_pec1 = 1;		//UART腳位方向規劃		0=OUT 1=IN
0240	30A3	set     PEC1
0241	0003	ret
				;20	}
				;21	
				;22	char PC_RX()//baudrate=9600  PE1
				;23	{
				;24		u8 i=0,buff=0;   //資料計數=0，從頭開始
0290	5F00	clr     ra
				;25		while(PE1_Rx);    //等待接收啟始位元
				_L4:
				_PC_RX:
				_PC_RX:
0280	3CA2	sz      PE1
0281	2A80	jmp     _L4
				;26		GCC_DELAY(T2);     //啟始位元等待1-bit時間
0282	0F31	mov     a, 31H
0283	340B	clr     BP0
0284	348B	clr     BP1
0285	2207	call    L0207
0286	340B	clr     BP0
0287	348B	clr     BP1
				;27		GCC_DELAY(T2/2);  //啟始位元再等待1/2-bit時間令資料線上信號較穩定 
0288	0F17	mov     a, 17H
0289	340B	clr     BP0
028A	348B	clr     BP1
028B	2206	call    L0206
028C	340B	clr     BP0
028D	348B	clr     BP1
028E	0F08	mov     a, 8H
028F	4081	mov     rb, a
				;28		for(i=0; i<8; i++)  //接收8-bit串列資料
				;29		{
				;30			buff=buff >> 1;  //資料緩衝右移1個bit
				_L7:
0291	340A	clr     C
0292	5B80	rrc     ra
				;31			if(PE1_Rx)  buff=buff | 0x80;//若接收的bit=1，則令資料的bit7=1
0293	38A2	snz     PE1
0294	2A96	jmp     _L5
0295	7380	set     ra.7
				;32			GCC_DELAY(T2-15);  //等待一段時間，接收下一個bit
				_L5:
0296	0F2D	mov     a, 2DH
0297	340B	clr     BP0
0298	348B	clr     BP1
0299	2206	call    L0206
029A	340B	clr     BP0
029B	348B	clr     BP1
029C	5781	sdz     rb
029D	2A91	jmp     _L7
				;33		}
				;34		return buff;
				;35	}
029E	4700	mov     a, ra
				@dummy .SECTION 'CODE'
029F	0003	ret
				;36	void rx_string()
				;37	{
				_rx_string:
				_rx_string:
02A0	0F0A	mov     a, AH
02A1	4097	mov     da, a
				;38		char w=0;
				;39		for(w=0;w<10;w++)
02A2	5F18	clr     w[0]
02B7	5498	inc     w[0]
02B8	5797	sdz     da
02B9	2AA3	jmp     _L14
				_L12:
02BA	0003	ret
				;40		{
				;41			output[w] = (char)(PC_RX() & 0x7f);
				_L14:
02A3	2280	call    _L4
02A4	4080	mov     ra, a
02A5	7780	clr     ra.7
02A6	4718	mov     a, w[0]
02A7	4081	mov     rb, a
02A8	5F02	clr     rc
02A9	3F85	sz      ACC.7
02AA	5F82	set     rc
02AB	0FAB	mov     a, ABH
02AC	4301	add     a, rb
02AD	0083	mov     MP1L, a
02AE	0F00	mov     a, 0H
02AF	5302	adc     a, rc
02B0	0084	mov     MP1H, a
02B1	4700	mov     a, ra
02B2	0082	mov     [02H], a
				;42			if(output[w]==13) break;
02B3	4700	mov     a, ra
02B4	0A0D	sub     a, DH
02B5	3D0A	sz      Z
02B6	2ABA	jmp     _L12
				;43		}
				;44	}
				;45	void PC_TX(char da)//baudrate=9600  PE0
				;46	{
				_PC_TX:
				_PC_TX:
020C	4097	mov     da[0], a
				;47		u8 i=0;   //資料計數=0，從頭開始
				;48		char buff=da; //讀取列表資料，同時資料計數加一
				;49		PE0_Tx=0; GCC_DELAY(T2);   //發射啟始位元     
020D	3422	clr     PE0
020E	0F31	mov     a, 31H
020F	340B	clr     BP0
0210	348B	clr     BP1
0211	2207	call    L0207
0212	340B	clr     BP0
0213	348B	clr     BP1
0214	0F08	mov     a, 8H
0215	4080	mov     ra, a
				;50		for(i=0; i<8; i++)    //發射8-bit串列資料
				;51		{
				;52			if(buff & 0x01) PE0_Tx=1; //若buff資料bit0=1則發射1
				L0216:
0216	7817	snz     da[0].0
0217	2A1A	jmp     L021A
0218	3022	set     PE0
0219	2A1B	jmp     L021B
				;53			else  PE0_Tx=0;         //若buff資料bit0=0則發射0
				L021A:
021A	3422	clr     PE0
				;54			buff >>= 1;           //資料右移換下1個bit
				L021B:
021B	5A17	rlca    da[0]
021C	5B97	rrc     da[0]
				;55			GCC_DELAY(T2-15);           //延時
021D	0F2D	mov     a, 2DH
021E	340B	clr     BP0
021F	348B	clr     BP1
0220	2206	call    L0206
0221	340B	clr     BP0
0222	348B	clr     BP1
0223	5780	sdz     ra
0224	2A16	jmp     L0216
				;56		}
				;57		PE0_Tx=1; GCC_DELAY(T2);      //發射停止位元
0225	3022	set     PE0
0226	0F31	mov     a, 31H
0227	340B	clr     BP0
0228	348B	clr     BP1
0229	2207	call    L0207
022A	340B	clr     BP0
022B	348B	clr     BP1
022C	0003	ret
				;58	}
				;59	void tx_string(char data[])	
				;60	{
				_tx_string:
				_tx_string:
026C	0F0E	mov     a, EH
026D	409A	mov     data[2], a
				;61		char test=0;
				;62		for(test=0;test<=13;test++)
026E	5F1B	clr     test[0]
027C	549B	inc     test[0]
027D	579A	sdz     data[2]
027E	2A6F	jmp     _L28
027F	0003	ret
				;63		{
				;64			PC_TX(data[test]);
				_L28:
026F	471B	mov     a, test[0]
0270	4081	mov     rb, a
0271	5F02	clr     rc
0272	3F85	sz      ACC.7
0273	5F82	set     rc
0274	4701	mov     a, rb
0275	4318	add     a, data[0]
0276	0083	mov     MP1L, a
0277	4702	mov     a, rc
0278	5319	adc     a, data[1]
0279	0084	mov     MP1H, a
027A	226A	call    L026A
027B	220C	call    _PC_TX
				;65		}
				;66	}
				data .SECTION 'DATA'
				__pa DB DUP (?) ; __pa
				__pac DB DUP (?) ; __pac
				__pbc DB DUP (?) ; __pbc
				__pcpu DB DUP (?) ; __pcpu
				__pcc DB DUP (?) ; __pcc
				__pe DB DUP (?) ; __pe
				__pec DB DUP (?) ; __pec
				__wdtc DB DUP (?) ; __wdtc
				__sima DB DUP (?) ; __sima
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				rd DB DUP (?)
				re DB DUP (?)
				rf DB DUP (?)
				rg DB DUP (?)
				da DB DUP (?) ; da
				data DB DUP (?) ; data
				test DB DUP (?) ; test
				i2creaddata DB DUP (?) ; i2creaddata
				i2cmask DB DUP (?) ; i2cmask
				i2cRegister DB DUP (?) ; i2cRegister
				i2cAddress DB DUP (?) ; i2cAddress
				i2creaddata DB DUP (?) ; i2creaddata
				output1 DB DUP (?) ; output1
				RxData DB DUP (?) ; RxData
				RxFlag DB 2 DUP (?) ; RxFlag
				DeviceFlag DB 2 DUP (?) ; DeviceFlag
				output DB DUP (?) ; output
