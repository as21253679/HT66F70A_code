				;file C:\Users\SA\Desktop\VR回饋TIMER\HT66F70A.c
				;1	#include <HT66F70A.h>
				;2	#include "MyType.H"
				;3	//d0 d1 d2 d3 d7
				;4	#define PE1_Rx  _pe1
				;5	#define PE0_Tx  _pe0
				;6	char PC_RX();
				;7	void PC_TX(char da);
				;8	void UART_init();
				;9	void tx_string(char data[],int c);
				;10	
				;11	char PC_RX_115200();
				;12	void rx_string_115200();
				;13	void PC_TX_115200(char da);
				;14	void tx_string_115200(char data[],int c);
				;15	extern char output[];
				;16	char output1[4]={'0','1'};
				;17	char s='0',s2='0';//s2紀錄上一個回饋
				;18	int gg=0;//震動0.5秒  
				;19	int dd=0;//冷熱持續5秒
				;20	int ff=0;//電人持續5秒
				;21	int r1=0,r2=0,r3=0;//r1震動 r2冷熱 r3店
				;22	void LED_Delay(u16 del)
				;23	{	
				;24		u16 i;									//@fSYS=8MH,延遲del*1ms
				;25		for(i=0;i<del;i++) GCC_DELAY(200);		//內建函式，延遲2000指令週期岆
				_LED_Delay:
				_LED_Delay:
0172	5F01	clr     rb
0173	5F02	clr     rc
0174	297E	jmp     _L2
				_L3:
0175	0F30	mov     a, 30H
0176	340B	clr     BP0
0177	348B	clr     BP1
0178	216E	call    L016E
0179	348B	clr     BP1
017A	340B	clr     BP0
017B	5481	inc     rb
017C	3D0A	sz      Z
017D	5482	inc     rc
				_L2:
017E	4701	mov     a, rb
017F	420A	sub     a, del[0]
0180	4702	mov     a, rc
0181	520B	sbc     a, del[1]
0182	3B0A	snz     CZ
0183	2975	jmp     _L3
0184	0003	ret
				;26	}
				;27	void Delayms(u16 del)
				;28	{	
				;29		u16 i;									//@fSYS=8MH,延遲del*1ms
				;30		for(i=0;i<del;i++) GCC_DELAY(2000);		//內建函式，延遲2000指令週期岆
				_Delayms:
				_Delayms:
0239	5F01	clr     rb
023A	5F02	clr     rc
023B	2A47	jmp     _L6
				_L7:
023C	0F01	mov     a, 1H
				L023D:
023D	408A	mov     da, a
023E	0FF1	mov     a, F1H
023F	340B	clr     BP0
0240	348B	clr     BP1
0241	222F	call    L022F
0242	348B	clr     BP1
0243	340B	clr     BP0
0244	5481	inc     rb
0245	3D0A	sz      Z
0246	5482	inc     rc
				_L6:
0247	4701	mov     a, rb
0248	420B	sub     a, del[0]
0249	4702	mov     a, rc
024A	520C	sbc     a, del[1]
024B	3B0A	snz     CZ
024C	2A3C	jmp     _L7
024D	0003	ret
				;31	}
				;32	void LED_change()//0洪 3藍   2綠
				;33	{
				;34		switch(s)
				_LED_change:
				_LED_change:
0147	4711	mov     a, s[0]
0148	0A31	sub     a, 31H
0149	3D0A	sz      Z
014A	295C	jmp     _L10
014B	0A01	sub     a, 1H
014C	3D0A	sz      Z
014D	2961	jmp     _L11
014E	4711	mov     a, s[0]
014F	0A33	sub     a, 33H
0150	3D0A	sz      Z
0151	2958	jmp     _L12
0152	4711	mov     a, s[0]
0153	0A34	sub     a, 34H
0154	390A	snz     Z
0155	2963	jmp     _L15
				;35		{
				;36			case '4':
				;37				_pd0 = 1;_pd1 = 1;_pd2 = 0;_pd3 = 1;
0156	301E	set     PD0
0157	2959	jmp     _L18
				;38				break;
				;39			case '3':
				;40				_pd0 = 0;_pd1 = 1;_pd2 = 0;_pd3 = 1;
				_L12:
0158	341E	clr     PD0
				_L18:
0159	309E	set     PD1
015A	351E	clr     PD2
015B	2966	jmp     _L16
				;41				break;
				;42			case '1':
				;43				_pd0 = 1;_pd1 = 1;_pd2 = 1;_pd3 = 0;
				_L10:
015C	301E	set     PD0
015D	309E	set     PD1
015E	311E	set     PD2
015F	359E	clr     PD3
				;44				break;
0160	2967	jmp     _L8
				;45			case '2':
				;46				_pd0 = 0;_pd1 = 1;_pd2 = 1;_pd3 = 1;
				_L11:
0161	341E	clr     PD0
0162	2964	jmp     _L17
				;47				break;
				;48			default:
				;49				_pd0 = 1;_pd1 = 1;_pd2 = 1;_pd3 = 1;
				_L15:
0163	301E	set     PD0
				_L17:
0164	309E	set     PD1
0165	311E	set     PD2
				_L16:
0166	319E	set     PD3
				_L8:
0167	0003	ret
0168	0000	nop
0169	0000	nop
016A	0000	nop
016B	0000	nop
				L016C:
016C	0000	nop
				L016D:
016D	0000	nop
				L016E:
016E	0000	nop
016F	1785	sdz     ACC
0170	296E	jmp     L016E
0171	0003	ret
				;50				break;
				;51		}
				;52	}
				;53	void LED()
				;54	{
				;55		int j=0;
				;56		u16 i,z;
				;57		i=0;
018E	5F0C	clr     _LED_2
018F	5F0D	clr     c
				;58		z=100;
018B	0F64	mov     a, 64H
018C	408E	mov     c[1], a
018D	5F0F	clr     test
				;59		LED_Delay(1000);
				_LED:
				_LED:
0185	0FE8	mov     a, E8H
0186	408A	mov     da, a
0187	0F03	mov     a, 3H
0188	408B	mov     data, a
0189	2172	call    _LED_Delay
018A	5F10	clr     test[1]
				;60		for(j=0;j<120;j++)
01AF	4710	mov     a, test[1]
01B0	0A78	sub     a, 78H
01B1	390A	snz     Z
01B2	2990	jmp     _L23
				;61		{
				;62			if(i>100)
				_L23:
0190	0F64	mov     a, 64H
0191	420C	sub     a, _LED_2
0192	0F00	mov     a, 0H
0193	520D	sbc     a, c
0194	3C0A	sz      C
0195	2998	jmp     _L20
				;63			{
				;64				LED_change();
0196	2147	call    _LED_change
0197	29AE	jmp     _L21
				;65			}
				;66			else
				;67			{
				;68				_pd0 = 1;_pd1 = 1;_pd2 = 1;_pd3 = 1;		
				_L20:
0198	301E	set     PD0
0199	309E	set     PD1
019A	311E	set     PD2
019B	319E	set     PD3
				;69				LED_Delay(z); 
019C	470E	mov     a, c[1]
019D	408A	mov     da, a
019E	470F	mov     a, test
019F	408B	mov     data, a
01A0	2172	call    _LED_Delay
				;70				LED_change();
01A1	2147	call    _LED_change
				;71				LED_Delay(i);
01A2	470C	mov     a, _LED_2
01A3	408A	mov     da, a
01A4	470D	mov     a, c
01A5	408B	mov     data, a
01A6	2172	call    _LED_Delay
				;72				i++;
01A7	548C	inc     _LED_2
01A8	3D0A	sz      Z
01A9	548D	inc     c
				;73				z--;
01AA	0FFF	mov     a, FFH
01AB	438E	addm    a, c[1]
01AC	0FFF	mov     a, FFH
01AD	538F	adcm    a, test
				_L21:
01AE	5490	inc     test[1]
				;74			}
				;75		}				
				;76		
				;77		i=100;
01BB	0F64	mov     a, 64H
01BC	408C	mov     _LED_2, a
01BD	5F0D	clr     c
				;78		z=0;
01B9	5F0E	clr     c[1]
01BA	5F0F	clr     test
				;79		LED_Delay(1000);
01B3	0FE8	mov     a, E8H
01B4	408A	mov     da, a
01B5	0F03	mov     a, 3H
01B6	408B	mov     data, a
01B7	2172	call    _LED_Delay
01B8	5F10	clr     test[1]
				;80		for(j=0;j<120;j++)
01E0	4710	mov     a, test[1]
01E1	0A78	sub     a, 78H
01E2	390A	snz     Z
01E3	29BE	jmp     _L27
01E4	0003	ret
				;81		{
				;82			if(i<10)
				_L27:
01BE	0F09	mov     a, 9H
01BF	420C	sub     a, _LED_2
01C0	0F00	mov     a, 0H
01C1	520D	sbc     a, c
01C2	380A	snz     C
01C3	29C9	jmp     _L24
				;83			{
				;84				_pd0 = 1;_pd1 = 1;_pd2 = 1;_pd3 = 1;
01C4	301E	set     PD0
01C5	309E	set     PD1
01C6	311E	set     PD2
01C7	319E	set     PD3
01C8	29DF	jmp     _L25
				;85			}
				;86			else
				;87			{
				;88				_pd0 = 1;_pd1 = 1;_pd2 = 1;_pd3 = 1;		
				_L24:
01C9	301E	set     PD0
01CA	309E	set     PD1
01CB	311E	set     PD2
01CC	319E	set     PD3
				;89				LED_Delay(z); 
01CD	470E	mov     a, c[1]
01CE	408A	mov     da, a
01CF	470F	mov     a, test
01D0	408B	mov     data, a
01D1	2172	call    _LED_Delay
				;90				LED_change();
01D2	2147	call    _LED_change
				;91				LED_Delay(i);
01D3	470C	mov     a, _LED_2
01D4	408A	mov     da, a
01D5	470D	mov     a, c
01D6	408B	mov     data, a
01D7	2172	call    _LED_Delay
				;92				i--;
01D8	0FFF	mov     a, FFH
01D9	438C	addm    a, _LED_2
01DA	0FFF	mov     a, FFH
01DB	538D	adcm    a, c
				;93				z++;
01DC	548E	inc     c[1]
01DD	3D0A	sz      Z
01DE	548F	inc     test
				_L25:
01DF	5490	inc     test[1]
				;94			}
				;95		}
				;96	}
				;97	void GPIO_init()
				;98	{
				;99		//製冷開關
				;100		_pcc6 = 0;
				_GPIO_init:
				_GPIO_init:
024E	371B	clr     PCC6
				;101		_pc6=1;
024F	331A	set     PC6
				;102		//led
				;103		_pdc0 = 0;    
0250	341F	clr     PDC0
				;104		_pdc1 = 0;
0251	349F	clr     PDC1
				;105		_pdc2 = 0;
0252	351F	clr     PDC2
				;106		_pdc3 = 0;
0253	359F	clr     PDC3
				;107		_pdc7 = 0;
0254	379F	clr     PDC7
				;108		_pd0=0;
0255	341E	clr     PD0
				;109		_pd1=0;
0256	349E	clr     PD1
				;110		_pd2=0;
0257	351E	clr     PD2
				;111		_pd3=0;
0258	359E	clr     PD3
				;112		_pd7=0;
0259	379E	clr     PD7
				;113		//電人
				;114		_pcc0 = 0;
025A	341B	clr     PCC0
				;115		_pc0=1;
025B	301A	set     PC0
				;116		//震動
				;117		_pec2 = 0;
025C	3523	clr     PEC2
				;118		_pe2=0;
025D	3522	clr     PE2
				;119		//製冷正反
				;120		_pgc0 = 0;
025E	342B	clr     PGC0
				;121		_pg0=1;
025F	302A	set     PG0
0260	0003	ret
				;122	}
				;123	DEFINE_ISR(ISR_UART,0x08)      //INT0=0x04    INT1=0x08   
				;124	{ 	
				@ISR_UART_code .SECTION 'CODE'
0008	4083	mov     r108, a
0009	070B	mov     a, BP
000A	1F0B	clr     BP
000B	2818	jmp     _ISR_UART
				@dummy8 .SECTION 'CODE'
000C	0000	nop
000D	0000	nop
000E	0000	nop
000F	0000	nop
0010	0000	nop
0011	0000	nop
0012	0000	nop
0013	0000	nop
				@dummy20 .SECTION 'CODE'
				_ISR_UART:
				_ISR_UART:
0018	4084	mov     r208, a
0019	070A	mov     a, STATUS
001A	40D5	mov     r308, a
001B	0703	mov     a, MP1L
001C	40D6	mov     r408, a
001D	0704	mov     a, MP1H
001E	40D7	mov     r508, a
001F	0707	mov     a, TBLP
0020	40D8	mov     r608, a
0021	0709	mov     a, TBHP
0022	40D9	mov     r708, a
				;125		s=PC_RX();
0023	22A2	call    _PC_RX
0024	4089	mov     _ISR_UART_2, a
0025	4091	mov     s[0], a
				;126		if(s=='3')      //震動on
0026	4709	mov     a, _ISR_UART_2
0027	0A33	sub     a, 33H
0028	390A	snz     Z
0029	2831	jmp     _L30
				;127		{			
				;128			_pe2=1;//震動on
002A	3122	set     PE2
				;129			r1=1;
002B	0F01	mov     a, 1H
002C	4096	mov     r1[0], a
002D	5F17	clr     r1[1]
				;130			gg=0;
002E	5F1C	clr     gg[0]
002F	5F1D	clr     gg[1]
0030	2866	jmp     _L31
				;131		}
				;132		else if(s=='4')  //電人on
				_L30:
0031	4709	mov     a, _ISR_UART_2
0032	0A34	sub     a, 34H
0033	390A	snz     Z
0034	2843	jmp     _L32
				;133		{
				;134			_pc0=0;//電人on
0035	341A	clr     PC0
				;135			_pc6=1;//製冷開關off
0036	331A	set     PC6
				;136			_pg0=1;//製冷正反off
0037	302A	set     PG0
				;137			
				;138			if(r3!=1)
0038	4712	mov     a, r3[0]
0039	0C01	xor     a, 1H
003A	4513	or      a, r3[1]
003B	3D0A	sz      Z
003C	283F	jmp     _L33
				;139				ff=0;
003D	5F18	clr     ff[0]
003E	5F19	clr     ff[1]
				;140			r3=1;
				_L33:
003F	0F01	mov     a, 1H
0040	4092	mov     r3[0], a
0041	5F13	clr     r3[1]
0042	2864	jmp     _L34
				;141		}	
				;142		else if(s=='1')//製冷正
				_L32:
0043	4709	mov     a, _ISR_UART_2
0044	0A31	sub     a, 31H
0045	390A	snz     Z
0046	284B	jmp     _L35
				;143		{
				;144			_pc0=1;//電人off
0047	301A	set     PC0
				;145			_pc6=0;//製冷開關on
0048	371A	clr     PC6
				;146			_pg0=1;//製冷正反off
0049	302A	set     PG0
004A	2852	jmp     _L42
				;147			
				;148			if(r2!=1)
				;149				r2=1;
				;150			dd=0;
				;151		}	
				;152		else if(s=='2')//製冷反
				_L35:
004B	4709	mov     a, _ISR_UART_2
004C	0A32	sub     a, 32H
004D	390A	snz     Z
004E	285D	jmp     _L37
				;153		{
				;154			_pc0=1;//電人off
004F	301A	set     PC0
				;155			_pc6=0;//製冷開關on
0050	371A	clr     PC6
				;156			_pg0=0;//製冷正反on
0051	342A	clr     PG0
				;157			
				;158			if(r2!=1)
				_L42:
0052	4714	mov     a, r2[0]
0053	0C01	xor     a, 1H
0054	4515	or      a, r2[1]
0055	3D0A	sz      Z
0056	285A	jmp     _L38
				;159				r2=1;
0057	0F01	mov     a, 1H
0058	4094	mov     r2[0], a
0059	5F15	clr     r2[1]
				;160			dd=0;
				_L38:
005A	5F1A	clr     dd[0]
005B	5F1B	clr     dd[1]
005C	2864	jmp     _L34
				;161		}		 
				;162		else if(s=='0')//全關
				_L37:
005D	4709	mov     a, _ISR_UART_2
005E	0A30	sub     a, 30H
005F	390A	snz     Z
0060	2864	jmp     _L34
				;163		{
				;164			_pc0=1;//電人off
0061	301A	set     PC0
				;165			_pc6=1;//製冷開關off
0062	331A	set     PC6
				;166			_pg0=1;//製冷正反off
0063	302A	set     PG0
				;167		}
				;168		if(s!='3')
				;169			s2=s;
				_L34:
0064	4709	mov     a, _ISR_UART_2
0065	409E	mov     s2[0], a
				;170		_int1f=0;
				_L31:
0066	36B0	clr     INT1F
0067	4704	mov     a, r208
0068	008B	mov     BP, a
0069	4755	mov     a, r308
006A	008A	mov     STATUS, a
006B	4756	mov     a, r408
006C	0083	mov     MP1L, a
006D	4757	mov     a, r508
006E	0084	mov     MP1H, a
006F	4758	mov     a, r608
0070	0087	mov     TBLP, a
0071	4759	mov     a, r708
0072	0089	mov     TBHP, a
0073	1D05	tabrd   ACC
0074	4703	mov     a, r108
0075	0004	reti
0076	0000	nop
0077	0000	nop
0078	0000	nop
0079	0000	nop
				;171	}
				;172	
				;173	DEFINE_ISR(ISR_TIMER,0x14)
				;174	{ 
				@ISR_TIMER_code .SECTION 'CODE'
0014	4085	mov     r114, a
0015	070B	mov     a, BP
0016	1F0B	clr     BP
0017	287A	jmp     _ISR_TIMER
				_ISR_TIMER:
				_ISR_TIMER:
007A	4086	mov     r214, a
007B	070A	mov     a, STATUS
007C	40DA	mov     r314, a
				;175		if(gg>500 && r1==1)
007D	0FF4	mov     a, F4H
007E	421C	sub     a, gg[0]
007F	0F01	mov     a, 1H
0080	521D	sbc     a, gg[1]
0081	3B8A	snz     SC
0082	288F	jmp     _L44
0083	4716	mov     a, r1[0]
0084	0C01	xor     a, 1H
0085	4517	or      a, r1[1]
0086	390A	snz     Z
0087	288F	jmp     _L44
				;176		{
				;177			_pe2=0;
0088	3522	clr     PE2
				;178			s=s2;
0089	471E	mov     a, s2[0]
008A	4091	mov     s[0], a
				;179			r1=0;
008B	5F16	clr     r1[0]
008C	5F17	clr     r1[1]
				;180			gg=0;
008D	5F1C	clr     gg[0]
008E	5F1D	clr     gg[1]
				;181		}
				;182		if(dd>7000 && r2==1)
				_L44:
008F	0F58	mov     a, 58H
0090	421A	sub     a, dd[0]
0091	0F1B	mov     a, 1BH
0092	521B	sbc     a, dd[1]
0093	3B8A	snz     SC
0094	28A8	jmp     _L45
0095	4714	mov     a, r2[0]
0096	0C01	xor     a, 1H
0097	4515	or      a, r2[1]
0098	390A	snz     Z
0099	28A8	jmp     _L45
				;183		{
				;184			_pc6=1;_pg0=1;		
009A	331A	set     PC6
009B	302A	set     PG0
				;185			r2=0;
009C	5F14	clr     r2[0]
009D	5F15	clr     r2[1]
				;186			dd=0;
009E	5F1A	clr     dd[0]
009F	5F1B	clr     dd[1]
				;187			s2='0';
00A0	0F30	mov     a, 30H
00A1	409E	mov     s2[0], a
				;188			s='0';
00A2	0F30	mov     a, 30H
00A3	4091	mov     s[0], a
				;189			_pd0 = 1;_pd1 = 1;_pd2 = 1;_pd3 = 1;
00A4	301E	set     PD0
00A5	309E	set     PD1
00A6	311E	set     PD2
00A7	319E	set     PD3
				;190		}	
				;191		if(ff>7000 && r3==1)
				_L45:
00A8	0F58	mov     a, 58H
00A9	4218	sub     a, ff[0]
00AA	0F1B	mov     a, 1BH
00AB	5219	sbc     a, ff[1]
00AC	3B8A	snz     SC
00AD	28C0	jmp     _L46
00AE	4712	mov     a, r3[0]
00AF	0C01	xor     a, 1H
00B0	4513	or      a, r3[1]
00B1	390A	snz     Z
00B2	28C0	jmp     _L46
				;192		{
				;193			_pc0=1;		
00B3	301A	set     PC0
				;194			r3=0;
00B4	5F12	clr     r3[0]
00B5	5F13	clr     r3[1]
				;195			ff=0;
00B6	5F18	clr     ff[0]
00B7	5F19	clr     ff[1]
				;196			s2='0';
00B8	0F30	mov     a, 30H
00B9	409E	mov     s2[0], a
				;197			s='0';
00BA	0F30	mov     a, 30H
00BB	4091	mov     s[0], a
				;198			_pd0 = 1;_pd1 = 1;_pd2 = 1;_pd3 = 1;
00BC	301E	set     PD0
00BD	309E	set     PD1
00BE	311E	set     PD2
00BF	319E	set     PD3
				;199		}
				;200		if(r1==1)
				_L46:
00C0	4716	mov     a, r1[0]
00C1	0C01	xor     a, 1H
00C2	4517	or      a, r1[1]
00C3	390A	snz     Z
00C4	28C8	jmp     _L47
				;201			gg++;
00C5	549C	inc     gg[0]
00C6	3D0A	sz      Z
00C7	549D	inc     gg[1]
				;202		if(r2==1)
				_L47:
00C8	4714	mov     a, r2[0]
00C9	0C01	xor     a, 1H
00CA	4515	or      a, r2[1]
00CB	390A	snz     Z
00CC	28D0	jmp     _L48
				;203			dd++;
00CD	549A	inc     dd[0]
00CE	3D0A	sz      Z
00CF	549B	inc     dd[1]
				;204		if(r3==1)
				_L48:
00D0	4712	mov     a, r3[0]
00D1	0C01	xor     a, 1H
00D2	4513	or      a, r3[1]
00D3	390A	snz     Z
00D4	28D8	jmp     _L49
				;205			ff++;
00D5	5498	inc     ff[0]
00D6	3D0A	sz      Z
00D7	5499	inc     ff[1]
				;206		_t0pf=0;
				_L49:
00D8	3634	clr     T0PF
00D9	4706	mov     a, r214
00DA	008B	mov     BP, a
00DB	475A	mov     a, r314
00DC	008A	mov     STATUS, a
00DD	4705	mov     a, r114
00DE	0004	reti
				;207	}
				;208	void main()
				;209	{	
				@code .SECTION 'CODE'
				include HT66F70A.inc
0000	1F0B	clr     BP
0001	28DF	jmp     begin_startup_value
				startupend3:
				@start .SECTION 'CODE'
0119	0F00	mov     a, 0H
011A	008B	mov     BP, a
011B	2A61	jmp     _main
011C	5441	inca    output[30]
011D	432B	add     a, output[8]
011E	4A57	dc	04A57H
011F	5041	sza     output[30]
0120	223D	call    L023D
0121	616E	call    96EH
0122	6266	call    A66H
0123	6375	call    B75H
0124	2232	call    L0232
0125	222C	call    L022C
0126	3034	set     T0PE
0127	3433	clr     INT2E
0128	3233	set     INT2F
0129	3434	clr     T0PE
012A	0D22	or      a, 22H
012B	000A	dc	0000AH
012C	5441	inca    output[30]
012D	432B	add     a, output[8]
012E	5049	sza     output[38]
012F	5453	inca    output[48]
0130	5241	sbc     a, output[30]
0131	3D54	sz      TM2DH.2
0132	5422	inca    output1[3]
0133	5043	sza     output[32]
0134	2C22	jmp     422H
0135	3122	set     PE2
0136	3239	set     INT2EG0
0137	312E	set     PH2
0138	3836	snz     T3PE
0139	342E	clr     PH0
013A	312E	set     PH2
013B	2C22	jmp     L0422
013C	3038	set     T4PE
013D	3738	clr     T5PF
013E	0A0D	sub     a, DH
013F	4100	cpla    ra
0140	2B54	jmp     354H
0141	4943	dc	04943H
0142	4D50	dc	04D50H
0143	444F	xor     a, output[44]
0144	3D45	sz      __wdtc[7].2
0145	0D31	or      a, 31H
0146	000A	dc	0000AH
				;210		char s;
				;211		_Bool stop = 0;
				;212		_wdtc=0b10101111;						
				_main:
				_main:
0261	0FAF	mov     a, AFH
0262	00BE	mov     WDTC, a
				;213		UART_init();
0263	2002	call    _UART_init
				;214		GPIO_init();
0264	224E	call    _GPIO_init
				;215		int i;
				;216		
				;217		Delayms(3000);
0265	0FB8	mov     a, B8H
0266	408B	mov     data, a
0267	0F0B	mov     a, BH
0268	408C	mov     _LED_2, a
0269	2239	call    _Delayms
				;218		tx_string("AT+CWJAP=\"nafbuc2\",\"40343244\"\r\n",31);
026A	0F1F	mov     a, 1FH
026B	408D	mov     c, a
026C	5F0E	clr     c[1]
026D	0F38	mov     a, 38H
026E	408B	mov     data, a
026F	0F82	mov     a, 82H
0270	408C	mov     _LED_2, a
0271	2214	call    _tx_string
				;219		Delayms(7000);
0272	0F58	mov     a, 58H
0273	408B	mov     data, a
0274	0F1B	mov     a, 1BH
0275	408C	mov     _LED_2, a
0276	2239	call    _Delayms
				;220		tx_string("AT+CIPSTART=\"TCP\",\"192.168.4.1\",8087\r\n",38);
0277	0F26	mov     a, 26H
0278	408D	mov     c, a
0279	5F0E	clr     c[1]
027A	0F58	mov     a, 58H
027B	408B	mov     data, a
027C	0F82	mov     a, 82H
027D	408C	mov     _LED_2, a
027E	2214	call    _tx_string
				;221		Delayms(1000);
027F	0FE8	mov     a, E8H
0280	408B	mov     data, a
0281	0F03	mov     a, 3H
0282	408C	mov     _LED_2, a
0283	2239	call    _Delayms
				;222		tx_string("AT+CIPMODE=1\r\n",14);
0284	0F0E	mov     a, EH
0285	408D	mov     c, a
0286	5F0E	clr     c[1]
0287	0F7F	mov     a, 7FH
0288	408B	mov     data, a
0289	0F82	mov     a, 82H
028A	408C	mov     _LED_2, a
028B	2214	call    _tx_string
				;223		Delayms(500);
028C	0FF4	mov     a, F4H
028D	408B	mov     data, a
028E	0F01	mov     a, 1H
028F	408C	mov     _LED_2, a
0290	2239	call    _Delayms
				;224		
				;225		//timer中斷  
				;226		_emi=1;
0291	3030	set     EMI
				;227		_mf0e=1;
0292	30B1	set     MF0E
				;228		_mfi0=0b00000001;
0293	0F01	mov     a, 1H
0294	00B4	mov     MFI0, a
				;229		_tm0c0=0b00001000;
0295	0F08	mov     a, 8H
0296	00DE	mov     TM0C0, a
				;230		
				;231		_ifs0=0b00001000;		//共用寄存器INT1=PE1
0297	0F08	mov     a, 8H
0298	80C8	lmov    IFS0, a
				;232		_integ=0b00001000; 		//負緣觸發
029A	0F08	mov     a, 8H
029B	00B9	mov     INTEG, a
				;233		_intc0=0b00000101;
029C	0F05	mov     a, 5H
029D	00B0	mov     INTC0, a
				;234		_pd7=1;
029E	339E	set     PD7
				;235		while(1)
				;236		{
				;237			LED();
				_L51:
029F	2185	call    _LED
02A0	2A9F	jmp     _L51
02A1	2AA1	jmp     $
				;238		}
				;239	} 
				;file C:\Users\SA\Desktop\VR回饋TIMER\UART.c
				;1	#include <HT66F70A.H>
				;2	#include <HT66F70A.h>
				;3	#include "MyType.H"
				;4	
				;5	#define T2 212  //baudrate  9600=4M/4/T => T=104
				;6	#define PE1_Rx  _pe1
				;7	#define PE0_Tx  _pe0
				;8	
				;9	char output[50];
				;10	
				;11	char PC_RX();
				;12	void rx_string();
				;13	void PC_TX(char da);
				;14	void tx_string(char data[],int c);
				;15	char PC_RX_115200();
				;16	void rx_string_115200();
				;17	void PC_TX_115200(char da);
				;18	void tx_string_115200(char data[],int c);
				;19	
				;20	void UART_init()
				;21	{
				;22		_pec1 = 1;	
				_UART_init:
				_UART_init:
0002	30A3	set     PEC1
				;23		_pec0 = 0;		//UART腳位方向規劃		0=OUT 1=IN
0003	3423	clr     PEC0
				;24		PE0_Tx=1;
0004	3022	set     PE0
0005	0003	ret
0006	0000	nop
0007	0000	nop
				;25	}
				;26	
				;27	char PC_RX()//baudrate=9600  PE1
				;28	{
				;29		u8 i=0,j=0,buff=0;   //資料計數=0，從頭開始
02B0	5F08	clr     ra08
				;30		//while(PE1_Rx);
				;31	   //等待接收啟始位元
				;32		GCC_DELAY(T2);     //啟始位元等待1-bit時間
				_PC_RX:
				_PC_RX:
02A2	0F33	mov     a, 33H
02A3	340B	clr     BP0
02A4	348B	clr     BP1
02A5	216E	call    L016E
02A6	348B	clr     BP1
02A7	340B	clr     BP0
				;33		GCC_DELAY(T2/2);  //啟始位元再等待1/2-bit時間令資料線上信號較穩定
02A8	0F18	mov     a, 18H
02A9	340B	clr     BP0
02AA	348B	clr     BP1
02AB	216C	call    L016C
02AC	348B	clr     BP1
02AD	340B	clr     BP0
02AE	0F08	mov     a, 8H
02AF	4087	mov     rb08, a
				;34		for(i=0; i<8; i++)  //接收8-bit串列資料
				;35		{
				;36			buff=buff >> 1;  //資料緩衝右移1個bit
				_L5:
02B1	340A	clr     C
02B2	5B88	rrc     ra08
				;37			if(PE1_Rx)  buff=buff | 0x80;//若接收的bit=1，則令資料的bit7=1
02B3	38A2	snz     PE1
02B4	2AB6	jmp     _L3
02B5	7388	set     ra08.7
				;38			GCC_DELAY(T2-15);  //等待一段時間，接收下一個bit
				_L3:
02B6	0F2F	mov     a, 2FH
02B7	340B	clr     BP0
02B8	348B	clr     BP1
02B9	216D	call    L016D
02BA	348B	clr     BP1
02BB	340B	clr     BP0
02BC	5787	sdz     rb08
02BD	2AB1	jmp     _L5
				;39		}
				;40		return buff;
				;41	}
02BE	4708	mov     a, ra08
02BF	0003	ret
				startup_value:
				@ROMDATA_BASE .SECTION 'CODE'
02C0	0012	dc	00012H
02C1	0091	mov     PAPU, a
02C2	0030	dc	00030H
02C3	0000	nop
02C4	0000	nop
02C5	0000	nop
02C6	0000	nop
02C7	0000	nop
02C8	3000	set     [00H].0
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
02C9	3130	set     INT1E
				L0354:
				org	0354h
0354	0000	nop
				L0422:
				org	0422h
0422	0000	nop
				L0943:
				org	0943h
0943	0000	nop
				L096E:
				org	096eh
096E	0000	nop
				L0A66:
				org	0a66h
0A66	0000	nop
				L0B75:
				org	0b75h
0B75	0000	nop
				L0D50:
				org	0d50h
0D50	0000	nop
				;42	void rx_string()
				;43	{
				;44		char w=0;
				;45		for(w=0;w<10;w++)
				;46		{
				;47			output[w] = (char)(PC_RX() & 0x7f);
				;48			if(output[w]==13) break;
				;49		}
				;50	}
				;51	void PC_TX(char da)//baudrate=9600  PE0
				;52	{
				_PC_TX:
				_PC_TX:
01E5	408A	mov     da[0], a
				;53		u8 i=0;   //資料計數=0，從頭開始
				;54		char buff=da; //讀取列表資料，同時資料計數加一
				;55		PE0_Tx=0; GCC_DELAY(T2);   //發射啟始位元     
01E6	3422	clr     PE0
01E7	0F33	mov     a, 33H
01E8	340B	clr     BP0
01E9	348B	clr     BP1
01EA	216E	call    L016E
01EB	348B	clr     BP1
01EC	340B	clr     BP0
01ED	0F08	mov     a, 8H
01EE	4080	mov     ra, a
				;56		for(i=0; i<8; i++)    //發射8-bit串列資料
				;57		{
				;58			if(buff & 0x01) PE0_Tx=1; //若buff資料bit0=1則發射1
				L01EF:
01EF	780A	snz     da[0].0
01F0	29F3	jmp     L01F3
01F1	3022	set     PE0
01F2	29F4	jmp     L01F4
				;59			else  PE0_Tx=0;         //若buff資料bit0=0則發射0
				L01F3:
01F3	3422	clr     PE0
				;60			buff >>= 1;           //資料右移換下1個bit
				L01F4:
01F4	5A0A	rlca    da[0]
01F5	5B8A	rrc     da[0]
				;61			GCC_DELAY(T2-15);           //延時
01F6	0F2F	mov     a, 2FH
01F7	340B	clr     BP0
01F8	348B	clr     BP1
01F9	216D	call    L016D
01FA	348B	clr     BP1
01FB	340B	clr     BP0
01FC	5780	sdz     ra
01FD	29EF	jmp     L01EF
				;62		}
				;63		PE0_Tx=1; GCC_DELAY(T2);      //發射停止位元
01FE	3022	set     PE0
01FF	0F33	mov     a, 33H
0200	340B	clr     BP0
0201	348B	clr     BP1
0202	216E	call    L016E
0203	348B	clr     BP1
0204	340B	clr     BP0
0205	0003	ret
0206	1483	inc     MP1L
				L0207:
0207	3F84	sz      MP1H.7
0208	2A0B	jmp     L020B
0209	0702	mov     a, [02H]
020A	0003	ret
				L020B:
020B	1B04	rrca    MP1H
020C	0E3F	and     a, 3FH
020D	0089	mov     TBHP, a
020E	1B03	rrca    MP1L
020F	0087	mov     TBLP, a
0210	1D05	tabrd   ACC
0211	3C0A	sz      C
0212	0708	mov     a, TBLH
0213	0003	ret
				;64	}
				;65	
				;66	void tx_string(char data[],int c)	
				;67	{
				;68		char test=0;
				;69		for(test=0;test<=c;test++)
				_tx_string:
				_tx_string:
0214	5F0F	clr     test[0]
0215	2A1F	jmp     _L25
021E	548F	inc     test[0]
				_L25:
021F	470F	mov     a, test[0]
0220	4081	mov     rb, a
0221	5F02	clr     rc
0222	3F85	sz      ACC.7
0223	5F82	set     rc
0224	470D	mov     a, c[0]
0225	4201	sub     a, rb
0226	470E	mov     a, c[1]
0227	5202	sbc     a, rc
0228	3B8A	snz     SC
0229	2A16	jmp     _L26
022A	0003	ret
022B	0000	nop
				L022C:
022C	0000	nop
022D	0000	nop
022E	0000	nop
				L022F:
022F	0000	nop
				L0230:
0230	0000	nop
0231	1785	sdz     ACC
				L0232:
0232	2A30	jmp     L0230
				L0233:
0233	0000	nop
0234	1785	sdz     ACC
0235	2A33	jmp     L0233
0236	578A	sdz     da
0237	2A33	jmp     L0233
0238	0003	ret
				;70		{
				;71			PC_TX(data[test]);
				_L26:
0216	4701	mov     a, rb
0217	430B	add     a, data[0]
0218	0083	mov     MP1L, a
0219	4702	mov     a, rc
021A	530C	adc     a, data[1]
021B	0084	mov     MP1H, a
021C	2207	call    L0207
021D	21E5	call    _PC_TX
				;72		}
				;73	}
				;74	
				;75	//115200
				;76	char PC_RX_115200()//baudrate=9600  PE1
				;77	{
				;78		u8 i=0,j=0,buff=0;   //資料計數=0，從頭開始
				;79		while(PE1_Rx);
				;80		GCC_DELAY(23);     //啟始位元等待1-bit時間
				;81		for(i=0; i<8; i++)  //接收8-bit串列資料
				;82		{
				;83			buff=buff >> 1;  //資料緩衝右移1個bit
				;84			if(PE1_Rx)  buff=buff | 0x80;//若接收的bit=1，則令資料的bit7=1
				;85			GCC_DELAY(9);  //等待一段時間，接收下一個bit
				;86		}
				;87		return buff;
				;88	}
				;89	void rx_string_115200()
				;90	{
				;91		char w=0;
				;92		for(w=0;w<10;w++)
				;93		{
				;94			output[w] = (char)(PC_RX_115200() & 0x7f);
				;95			if(output[w]==13) break;
				;96		}
				;97	}
				;98	void PC_TX_115200(char da)//baudrate=9600  PE0
				;99	{
				;100		u8 i=0;   //資料計數=0，從頭開始
				;101		char buff=da; //讀取列表資料，同時資料計數加一
				;102		PE0_Tx=0; GCC_DELAY(20);   //發射啟始位元     
				;103		for(i=0; i<8; i++)    //發射8-bit串列資料
				;104		{
				;105			if(buff & 0x01) PE0_Tx=1; //若buff資料bit0=1則發射1
				;106			else  PE0_Tx=0;         //若buff資料bit0=0則發射0
				;107			buff >>= 1;           //資料右移換下1個bit
				;108			GCC_DELAY(7);           //延時
				;109		}
				;110		PE0_Tx=1; GCC_DELAY(20);      //發射停止位元
				;111	}
				;112	
				;113	void tx_string_115200(char data[],int c)	
				;114	{
				;115		char test=0;
				;116		for(test=0;test<=c;test++)
				;117		{
				;118			PC_TX_115200(data[test]);
				;119		}
				;120	}
				;file C:\Users\SA\Desktop\VR回饋TIMER\startup1_l.asm
				;1	;;--------------------------------------------------------------;;
				;2	;;    This file is part of the Holtek C Compiler V3 package     ;;
				;3	;;    For the initialization of static linkage variables        ;;
				;4	;;    Copyright (C) 2017 Holtek Semiconductor Inc.              ;;
				;5	;;    Version: 1.07 (Above IDE3000 V7.94)                       ;;
				;6	;;    Date:    2017/03/06                                        ;;
				;7	;;--------------------------------------------------------------;;
				;8	
				;9	acc equ [05h]
				;10	tblp equ [07h]
				;11	tblh equ [08h]
				;12	;;tbhp equ [09h] 
				;13	r0 equ [00h]
				;14	mp0 equ [01h]
				;15	r1 equ [02h]
				;16	mp1l equ [03h]
				;17	mp1h equ [04h]
				;18	z equ [0ah].2
				;19	c equ [0ah].0
				;20	
				;21	ifndef tbhp
				;22	tbhp equ [09h]
				;23	endif
				;24	 
				;25	extern startup_value_1:near
				;26	
				;27	@start .section 'code'
				;28	begin_startup_value:
				;29	  mov a,low (offset startup_value_1) 
				begin_startup_value:
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
00DF	0FBF	mov     a, BFH
				;30	  mov tblp,a
00E0	0087	mov     TBLP, a
				;31	  mov a,high (offset startup_value_1) 
00E1	0F02	mov     a, 2H
				;32	  mov tbhp,a
00E2	0089	mov     TBHP, a
				;33	next_table:
				;34	  ;CLR WDT
				;35	  inc tblp
				next_table:
00E3	1487	inc     TBLP
				;36	  sz z
00E4	3D0A	sz      Z
				;37	  inc tbhp
00E5	1489	inc     TBHP
				;38	ifdef USE_TABRDC
				;39	  tabrdc mp0
				;40	else
				;41	  tabrd mp0
00E6	1D01	tabrd   MP0
				;42	endif
				;43	  sz mp0
00E7	1081	sz      MP0
				;44	  jmp read_data
00E8	28EA	jmp     read_data
				;45	  jmp startupend1
00E9	28FF	jmp     startupend1
				;46	read_data:
				;47	  inc tblp
				read_data:
00EA	1487	inc     TBLP
				;48	  sz z
00EB	3D0A	sz      Z
				;49	  inc tbhp
00EC	1489	inc     TBHP
				;50	ifdef USE_TABRDC
				;51	  tabrdc mp1l
				;52	else
				;53	  tabrd mp1l
00ED	1D03	tabrd   MP1L
				;54	endif
				;55	  mov a,tblh
00EE	0708	mov     a, TBLH
				;56	  mov mp1h,a
00EF	0084	mov     MP1H, a
				;57	next_data:
				;58	  inc tblp
				next_data:
00F0	1487	inc     TBLP
				;59	  sz z
00F1	3D0A	sz      Z
				;60	  inc tbhp
00F2	1489	inc     TBHP
				;61	ifdef USE_TABRDC
				;62	  tabrdc acc
				;63	else
				;64	  tabrd acc
00F3	1D05	tabrd   ACC
				;65	endif
				;66	  mov r1,a
00F4	0082	mov     [02H], a
				;67	  sdz mp0
00F5	1781	sdz     MP0
				;68	  jmp $+2
00F6	28F8	jmp     L00F8
				;69	  jmp next_table
00F7	28E3	jmp     next_table
				;70	  inc mp1l
				L00F8:
00F8	1483	inc     MP1L
				;71	  mov a,tblh
00F9	0708	mov     a, TBLH
				;72	  mov r1,a
00FA	0082	mov     [02H], a
				;73	  inc mp1l
00FB	1483	inc     MP1L
				;74	  sdz mp0
00FC	1781	sdz     MP0
				;75	  jmp next_data
00FD	28F0	jmp     next_data
				;76	  jmp next_table
00FE	28E3	jmp     next_table
				;77	
				;78	;end_startup_value:
				;79	
				;80	startupend1:
				;81	ifndef Disable_Bit_Initial
				;82		MOV A,high  bitdatasec1_start
				startupend1:
00FF	0F00	mov     a, 0H
				;83		MOV mp1h,a
0100	0084	mov     MP1H, a
				;84		MOV A,offset bitdatasec1_end
0101	0F80	mov     a, 80H
				;85		mov mp1l,A
0102	0083	mov     MP1L, a
				;86		dec mp1l
0103	1583	dec     MP1L
				;87		clr z
0104	350A	clr     Z
				;88		sub a,offset bitdatasec1_start
0105	0A80	sub     a, 80H
				;89		sz z
0106	3D0A	sz      Z
				;90		jmp startupend2
0107	290C	jmp     startupend2
				;91	L0005:
				;92		set r1
				L0005:
0108	1F82	set     [02H]
				;93		dec mp1l
0109	1583	dec     MP1L
				;94		sdz  acc
010A	1785	sdz     ACC
				;95		jmp L0005
010B	2908	jmp     L0005
				;96	
				;97	startupend2:
				;98		MOV A,high  bitdatasec0_start
				startupend2:
010C	0F00	mov     a, 0H
				;99		MOV mp1h,a
010D	0084	mov     MP1H, a
				;100		MOV A,offset bitdatasec0_end
010E	0F80	mov     a, 80H
				;101		mov mp1l,A
010F	0083	mov     MP1L, a
				;102		dec mp1l
0110	1583	dec     MP1L
				;103		clr z
0111	350A	clr     Z
				;104		sub a,offset bitdatasec0_start
0112	0A80	sub     a, 80H
				;105		sz  z
0113	3D0A	sz      Z
				;106		jmp startupend3
0114	2919	jmp     startupend3
				;107	L0006:
				;108		clr r1
				L0006:
0115	1F02	clr     [02H]
				;109		dec mp1l
0116	1583	dec     MP1L
				;110		sdz  acc
0117	1785	sdz     ACC
				;111		jmp L0006
0118	2915	jmp     L0006
				;112	startupend3:
				;113	endif		
				;114	   
				;115	@ROMDATA_BASE .SECTION com_l 'CODE'  
				;116	startup_value:
				;117	;;linker range the initial value table here
				;118	
				;119	@BITDATASEC1 .SECTION com_l 'DATA'  
				;120	bitdatasec1_start:
				;121	
				;122	@BITDATASEC1 .SECTION com_e 'DATA'  
				;123	bitdatasec1_end:
				;124	
				;125	@BITDATASEC .SECTION com_l 'DATA'  
				;126	bitdatasec0_start:
				;127	
				;128	@BITDATASEC .SECTION com_e 'DATA'  
				;129	bitdatasec0_end:
				data .SECTION 'DATA'
				__pc DB DUP (?) ; __pc
				__pcc DB DUP (?) ; __pcc
				__pd DB DUP (?) ; __pd
				__pdc DB DUP (?) ; __pdc
				__pe DB DUP (?) ; __pe
				__pec DB DUP (?) ; __pec
				__pg DB DUP (?) ; __pg
				__pgc DB DUP (?) ; __pgc
				__intc0 DB DUP (?) ; __intc0
				__intc1 DB DUP (?) ; __intc1
				__mfi0 DB DUP (?) ; __mfi0
				__integ DB DUP (?) ; __integ
				__wdtc DB DUP (?) ; __wdtc
				__tm0c0 DB DUP (?) ; __tm0c0
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				r108 DB DUP (?)
				r208 DB DUP (?)
				r114 DB DUP (?)
				r214 DB DUP (?)
				rb08 DB DUP (?)
				ra08 DB DUP (?)
				_ISR_UART_2 DB DUP (?)
				da DB DUP (?) ; da
				data DB DUP (?) ; data
				_LED_2 DB DUP (?)
				c DB 2 DUP (?) ; c
				test DB DUP (?) ; test
				s DB DUP (?) ; s
				r3 DB 2 DUP (?) ; r3
				r2 DB 2 DUP (?) ; r2
				r1 DB 2 DUP (?) ; r1
				ff DB 2 DUP (?) ; ff
				dd DB 2 DUP (?) ; dd
				gg DB 2 DUP (?) ; gg
				s2 DB DUP (?) ; s2
				output1 DB DUP (?) ; output1
				output DB DUP (?) ; output
				r308 DB DUP (?)
				r408 DB DUP (?)
				r508 DB DUP (?)
				r608 DB DUP (?)
				r708 DB DUP (?)
				r314 DB DUP (?)
				__ifs0 DB DUP (?) ; __ifs0
