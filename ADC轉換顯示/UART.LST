"File: UART.c        Assembler  Version HGASM0202      Page 1


   1  0000              ; Generated by holtek-gcc v3.13, Mon Nov 14 13:47:08 2016
   2  0000              ; 
   3  0000              ; Configuration:
   4  0000              ;       with long instruction
   5  0000              ;       Multi-ROM, Multi-RAM
   6  0000              ;       bits_per_rom_unit:16
   7  0000              ;       with mp1
   8  0000              ;       with tbhp, address(0x9)
   9  0000              ;          Use tabrd-const
  10  0000              ;       
  11  0000              ; SFR address of long-instruction arch:
  12  0000              ;    mp0 = -1,1,0
  13  0000              ;    mp1 = 4,3,2
  14  0000              ;    mp2 = 14,13,12
  15  0000              ;    tbp = 9,7,8
  16  0000              ;    acc = 5
  17  0000              ;    pcl = 6
  18  0000              ;    status = 10
  19  0000              ;    bp = 11
  20  0000              ;    intc = 48
  21  0000              ;       
  22  0000              ;       
  23  0000              ; use 'tabrdc' instead of 'tabrd'
  24  0000              ;       
  25  0000              
  26  0000              #pragma translator "holtek-gcc 4.6.4" "3.13" "build 20130711"
  27  0000              ; Rebuild 71
  28  0000              
  29  0000              ir equ [2]
  30  0000              mp equ [3]
  31  0000              sbp equ [4]
  32  0000              acc equ [5]
  33  0000              bp equ [11]
  34  0000              tblp equ [7]
  35  0000              tbhp equ [9]
  36  0000              status equ [10]
  37  0000              c equ [10].0
  38  0000              ac equ [10].1
  39  0000              z equ [10].2
  40  0000              ov equ [10].3
  41  0000              cz equ [10].6
  42  0000              sc equ [10].7
  43  0000              intc equ [48]
  44  0000              
  45  0000              extern ra:byte
  46  0000              extern rb:byte
  47  0000              extern rc:byte
  48  0000              extern rd:byte
  49  0000              extern re:byte
  50  0000              extern rf:byte
  51  0000              extern rg:byte
  52  0000              extern rh:byte
  53  0000              extern _Crom2Prom:near
  54  0000              extern _Crom2PromNext:near
  55  0000              @HCCINIT	.section 'data'
  56  0000              @HCCINIT0	.section 'data'
  57  0000              
  58  0000              #pragma debug scope 1 1
  59  0000              	extern __DELAY3:near
"File: UART.ASM      Assembler  Version HGASM0202      Page 2

  60  0000              	extern __DELAYX3:near
  61  0000              	extern __DELAYX6:near
  62  0000              	extern __DELAYY5:near
  63  0000              	extern __DELAYY3:near
  64  0000              	extern _builtin_holtek_delay_2:byte
  65  0000              ___adrh equ [107]
  66  0000              ___pc equ [26]
  67  0000              public _ISR_ADC
  68  0000              #pragma debug scope 2 1

 119  0000              #line 119 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 119  0000              rombank 0 @ISR_ADC_code
 119  0000              @ISR_ADC_code .section at 28 'code'
 119  0000  0080     E  	mov r1,a
 119  0001  070B        	mov a,bp
 119  0002  1F0B        	clr bp
 119  0003  2800     R  	jmp _ISR_ADC
 119  0004              ROMBANK 0 _ISR_ADC
 119  0004              #pragma debug scope 1 1
 119  0004              @dummy28 endp
 119  0004              #pragma debug scope 3 1
 119  0000              _ISR_ADC .section 'code'
 119  0000              _ISR_ADC proc
 119  0000  0080     E  	mov r2,a
 119  0001  070A        	mov a, status
 119  0002  0080     E  	mov r3,a
 119  0003  016B        	cpla [107]
 119  0004  009A        	mov [26],a
 119  0005  0700     E  	mov a,r2
 119  0006  008B        	mov bp,a
 119  0007  0700     E  	mov a,r3
 119  0008  008A        	mov status,a
 119  0009  0700     E  	mov a,r1
 119  000A  0004        	reti
 119  000B              _ISR_ADC endp
 119  000B              
 119  000B              #line 119 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 119  000B              #pragma debug scope 1 1
 119  000B              public _Delay100us
 119  000B              #pragma debug scope 4 1
 122  000B              #line 122 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 122  0000              _Delay100us .section 'code'
 122  0000              _Delay100us proc
 122  0000              public _Delay100us_2
 122  0000  0002[           local _Delay100us_2 db 2 dup(?)	; 2,0
            00
            ]
 122  0002              #pragma debug variable 10 4 _Delay100us_2+0 "del"
 123  0000              #line 123 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 123  0000  1F00     E  	clr rb
 123  0001  1F00     E  	clr rc
 123  0002              _L3:
 123  0002              #line 123 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 123  0002  0700     E  	mov a,rb
 123  0003  0200     R  	sub a,_Delay100us_2[0]
 123  0004  0700     E  	mov a,rc
 123  0005  1200     R  	sbc a,_Delay100us_2[1]
 123  0006  3F0A        	sz cz
 123  0007  2800     R  	jmp _L2
 123  0008  1F00     E  	clr ra
"File: UART.c        Assembler  Version HGASM0202      Page 3

 123  0009              _L6:
 124  0009              #line 124 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 124  0009              ;# 124 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 124  0009  0000        	nop
 124  000A  1480     E  	inc ra
 124  000B  0700     E  	mov a,ra
 124  000C  0A1A        	sub a,26
 124  000D  390A        	snz z
 124  000E  2800     R  	jmp _L6
 123  000F              #line 123 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 123  000F  1480     E  	inc rb
 123  0010  3D0A        	sz z
 123  0011  1480     E  	inc rc
 123  0012  2800     R  	jmp _L3
 123  0013              _L2:
 123  0013  0003        	ret
 123  0014              _Delay100us endp
 123  0014              #line 123 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 123  0014              #pragma debug scope 1 1
 123  0014              public _Delayms
 123  0014              #pragma debug scope 5 1
 131  0014              #line 131 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 131  0000              _Delayms .section 'code'
 131  0000              _Delayms proc
 131  0000              public _Delayms_2
 131  0000  0002[           local _Delayms_2 db 2 dup(?)	; 2,0
            00
            ]
 131  0002              #pragma debug variable 10 5 _Delayms_2+0 "del"
 133  0000              #line 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 133  0000  1F00     E  	clr rb
 133  0001  1F00     E  	clr rc
 133  0002  2800     R  	jmp _L9
 133  0003              _L10:
 133  0003              #line 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF 2000>263690
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	ERRMESSAGE 'the value 2000of the argument exceeds the maxinum 263690'
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF 2000<0
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	ERRMESSAGE 'the value 2000 of the argument exceeds the mininum 0'
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF 2000==0
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	JMP $
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000>=1) AND (2000<( 4 + __PBP__ * 2))
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	NOP
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000>=2) AND (2000<( 4 + __PBP__ * 2))
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	NOP
 133  0003              	ENDIF
"File: UART.c        Assembler  Version HGASM0202      Page 4

 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000>=3) AND (2000<( 4 + __PBP__ * 2))
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	NOP
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000>=4) AND (2000<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	NOP
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000>=5) AND (2000<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	NOP
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000>=6) AND (2000<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	NOP
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000>=7) AND (2000<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	NOP
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000>=8) AND (2000<( 4 + __PBP__ * 2))  AND ( __PBP__ > 2 )
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	NOP
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000==9)  AND ( __PBP__ > 2 )
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	NOP
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000< ( 8 + __PBP__ * 2)) AND (2000>( 3 + __PBP__ * 2))
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	fcall __DELAY3 + ( 7 + __PBP__ * 2) -2000
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000< ( 0404h + __PBP__ * 2)) AND (2000>( 7 + __PBP__ * 2))
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	MOV A,(2000-( 4 + __PBP__ * 2))/4
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	fcall __DELAYX3 + 3 -((2000-( 4 + __PBP__ * 2)) MOD 4) 
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000< ( 040bh + __PBP__ * 2)) AND (2000> ( 0403h + __PBP__ * 2))
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	MOV A,0 
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	fcall __DELAYX6 + ( 040ah + __PBP__ * 2) -2000
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000 >= ( 040bh + __PBP__ * 2)) AND ((((2000-( 9 + __PBP__ * 2))%0402h)/4+1)>256)
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	MOV A,(2000-( 9 + __PBP__ * 2))/0402h
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	MOV _builtin_holtek_delay_2,A
"File: UART.c        Assembler  Version HGASM0202      Page 5

 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	MOV A,0
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	fcall __DELAYY5 +5- (((2000-( 9 + __PBP__ * 2))%0402h)%6) 
 133  0003              	ENDIF
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003              	IF (2000 >= ( 040bh + __PBP__ * 2)) AND ((((2000-( 9 + __PBP__ * 2))%0402h)/4+1)<=256)
 133  0003              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0003  0F01        	MOV A,(2000-( 9 + __PBP__ * 2))/0402h
 133  0004              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0004  0080     E  	MOV _builtin_holtek_delay_2,A
 133  0005              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0005  0FF1        	MOV A,((2000-( 9 + __PBP__ * 2))%0402h)/4+1
 133  0006              ;# 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 133  0006              	fcall __DELAYY3 +3-(((2000-( 9 + __PBP__ * 2))%0402h)%4) 
 133  000D              	ENDIF
 133  000D  1480     E  	inc rb
 133  000E  3D0A        	sz z
 133  000F  1480     E  	inc rc
 133  0010              _L9:
 133  0010  0700     E  	mov a,rb
 133  0011  0200     R  	sub a,_Delayms_2[0]
 133  0012  0700     E  	mov a,rc
 133  0013  1200     R  	sbc a,_Delayms_2[1]
 133  0014  3B0A        	snz cz
 133  0015  2800     R  	jmp _L10
 133  0016  0003        	ret
 133  0017              _Delayms endp
 133  0017              #line 133 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 133  0017              #pragma debug scope 1 1
 133  0017              public _GPIO_init
 133  0017              #pragma debug scope 6 1
 136  0017              #line 136 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 136  0000              _GPIO_init .section 'code'
 136  0000              _GPIO_init proc
 136  0000  0003        	ret
 136  0001              _GPIO_init endp
 136  0001              #line 136 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 136  0001              #pragma debug scope 1 1
 136  0001              ___pec equ [35]
 136  0001              public _UART_init
 136  0001              #pragma debug scope 7 1
 143  0001              #line 143 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 143  0000              _UART_init .section 'code'
 143  0000              _UART_init proc
 144  0000              #line 144 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 144  0000  3423        	clr [35].0
 145  0001              #line 145 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 145  0001  30A3        	set [35].1
 145  0002  0003        	ret
 145  0003              _UART_init endp
 145  0003              #line 145 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 145  0003              #pragma debug scope 1 1
 145  0003              ___pe equ [34]
 145  0003              public _PC_RX
 145  0003              #pragma debug scope 8 1
 149  0003              #line 149 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 149  0000              _PC_RX .section 'code'
 149  0000              _PC_RX proc
 149  0000              _L15:
"File: UART.c        Assembler  Version HGASM0202      Page 6

 151  0000              #line 151 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 151  0000  3CA2        	sz [34].1
 151  0001  2800     R  	jmp _L15
 152  0002              #line 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF 205>263690
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	ERRMESSAGE 'the value 205of the argument exceeds the maxinum 263690'
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF 205<0
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	ERRMESSAGE 'the value 205 of the argument exceeds the mininum 0'
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF 205==0
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	JMP $
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205>=1) AND (205<( 4 + __PBP__ * 2))
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	NOP
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205>=2) AND (205<( 4 + __PBP__ * 2))
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	NOP
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205>=3) AND (205<( 4 + __PBP__ * 2))
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	NOP
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205>=4) AND (205<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	NOP
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205>=5) AND (205<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	NOP
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205>=6) AND (205<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	NOP
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205>=7) AND (205<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	NOP
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205>=8) AND (205<( 4 + __PBP__ * 2))  AND ( __PBP__ > 2 )
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	NOP
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
"File: UART.c        Assembler  Version HGASM0202      Page 7

 152  0002              	IF (205==9)  AND ( __PBP__ > 2 )
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	NOP
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205< ( 8 + __PBP__ * 2)) AND (205>( 3 + __PBP__ * 2))
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	fcall __DELAY3 + ( 7 + __PBP__ * 2) -205
 152  0002              	ENDIF
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002              	IF (205< ( 0404h + __PBP__ * 2)) AND (205>( 7 + __PBP__ * 2))
 152  0002              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0002  0F31        	MOV A,(205-( 4 + __PBP__ * 2))/4
 152  0003              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  0003              	fcall __DELAYX3 + 3 -((205-( 4 + __PBP__ * 2)) MOD 4) 
 152  000A              	ENDIF
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	IF (205< ( 040bh + __PBP__ * 2)) AND (205> ( 0403h + __PBP__ * 2))
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	MOV A,0 
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	fcall __DELAYX6 + ( 040ah + __PBP__ * 2) -205
 152  000A              	ENDIF
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	IF (205 >= ( 040bh + __PBP__ * 2)) AND ((((205-( 9 + __PBP__ * 2))%0402h)/4+1)>256)
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	MOV A,(205-( 9 + __PBP__ * 2))/0402h
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	MOV _builtin_holtek_delay_2,A
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	MOV A,0
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	fcall __DELAYY5 +5- (((205-( 9 + __PBP__ * 2))%0402h)%6) 
 152  000A              	ENDIF
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	IF (205 >= ( 040bh + __PBP__ * 2)) AND ((((205-( 9 + __PBP__ * 2))%0402h)/4+1)<=256)
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	MOV A,(205-( 9 + __PBP__ * 2))/0402h
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	MOV _builtin_holtek_delay_2,A
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	MOV A,((205-( 9 + __PBP__ * 2))%0402h)/4+1
 152  000A              ;# 152 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 152  000A              	fcall __DELAYY3 +3-(((205-( 9 + __PBP__ * 2))%0402h)%4) 
 152  000A              	ENDIF
 153  000A              #line 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF 205/2>263690
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	ERRMESSAGE 'the value 205/2of the argument exceeds the maxinum 263690'
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF 205/2<0
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	ERRMESSAGE 'the value 205/2 of the argument exceeds the mininum 0'
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF 205/2==0
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	JMP $
"File: UART.c        Assembler  Version HGASM0202      Page 8

 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2>=1) AND (205/2<( 4 + __PBP__ * 2))
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	NOP
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2>=2) AND (205/2<( 4 + __PBP__ * 2))
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	NOP
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2>=3) AND (205/2<( 4 + __PBP__ * 2))
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	NOP
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2>=4) AND (205/2<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	NOP
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2>=5) AND (205/2<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	NOP
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2>=6) AND (205/2<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	NOP
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2>=7) AND (205/2<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	NOP
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2>=8) AND (205/2<( 4 + __PBP__ * 2))  AND ( __PBP__ > 2 )
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	NOP
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2==9)  AND ( __PBP__ > 2 )
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	NOP
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2< ( 8 + __PBP__ * 2)) AND (205/2>( 3 + __PBP__ * 2))
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	fcall __DELAY3 + ( 7 + __PBP__ * 2) -205/2
 153  000A              	ENDIF
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A              	IF (205/2< ( 0404h + __PBP__ * 2)) AND (205/2>( 7 + __PBP__ * 2))
 153  000A              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000A  0F17        	MOV A,(205/2-( 4 + __PBP__ * 2))/4
 153  000B              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  000B              	fcall __DELAYX3 + 3 -((205/2-( 4 + __PBP__ * 2)) MOD 4) 
 153  0012              	ENDIF
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	IF (205/2< ( 040bh + __PBP__ * 2)) AND (205/2> ( 0403h + __PBP__ * 2))
"File: UART.c        Assembler  Version HGASM0202      Page 9

 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	MOV A,0 
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	fcall __DELAYX6 + ( 040ah + __PBP__ * 2) -205/2
 153  0012              	ENDIF
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	IF (205/2 >= ( 040bh + __PBP__ * 2)) AND ((((205/2-( 9 + __PBP__ * 2))%0402h)/4+1)>256)
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	MOV A,(205/2-( 9 + __PBP__ * 2))/0402h
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	MOV _builtin_holtek_delay_2,A
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	MOV A,0
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	fcall __DELAYY5 +5- (((205/2-( 9 + __PBP__ * 2))%0402h)%6) 
 153  0012              	ENDIF
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	IF (205/2 >= ( 040bh + __PBP__ * 2)) AND ((((205/2-( 9 + __PBP__ * 2))%0402h)/4+1)<=256)
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	MOV A,(205/2-( 9 + __PBP__ * 2))/0402h
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	MOV _builtin_holtek_delay_2,A
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	MOV A,((205/2-( 9 + __PBP__ * 2))%0402h)/4+1
 153  0012              ;# 153 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 153  0012              	fcall __DELAYY3 +3-(((205/2-( 9 + __PBP__ * 2))%0402h)%4) 
 153  0012              	ENDIF
 153  0012  0F08        	mov a,8
 153  0013  0080     E  	mov rb,a
 150  0014              #line 150 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 150  0014  1F00     E  	clr ra
 150  0015              _L18:
 156  0015              #line 156 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 156  0015  340A        	clr c
 156  0016  1B80     E  	rrc ra
 157  0017              #line 157 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 157  0017  38A2        	snz [34].1
 157  0018  2800     R  	jmp _L16
 157  0019  3000     E  	set ra.7
 157  001A              _L16:
 158  001A              #line 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF 205-15>263690
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	ERRMESSAGE 'the value 205-15of the argument exceeds the maxinum 263690'
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF 205-15<0
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	ERRMESSAGE 'the value 205-15 of the argument exceeds the mininum 0'
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF 205-15==0
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	JMP $
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15>=1) AND (205-15<( 4 + __PBP__ * 2))
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	NOP
"File: UART.c        Assembler  Version HGASM0202      Page 10

 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15>=2) AND (205-15<( 4 + __PBP__ * 2))
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	NOP
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15>=3) AND (205-15<( 4 + __PBP__ * 2))
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	NOP
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15>=4) AND (205-15<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	NOP
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15>=5) AND (205-15<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	NOP
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15>=6) AND (205-15<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	NOP
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15>=7) AND (205-15<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	NOP
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15>=8) AND (205-15<( 4 + __PBP__ * 2))  AND ( __PBP__ > 2 )
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	NOP
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15==9)  AND ( __PBP__ > 2 )
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	NOP
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15< ( 8 + __PBP__ * 2)) AND (205-15>( 3 + __PBP__ * 2))
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	fcall __DELAY3 + ( 7 + __PBP__ * 2) -205-15
 158  001A              	ENDIF
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A              	IF (205-15< ( 0404h + __PBP__ * 2)) AND (205-15>( 7 + __PBP__ * 2))
 158  001A              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001A  0F2D        	MOV A,(205-15-( 4 + __PBP__ * 2))/4
 158  001B              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  001B              	fcall __DELAYX3 + 3 -((205-15-( 4 + __PBP__ * 2)) MOD 4) 
 158  0022              	ENDIF
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	IF (205-15< ( 040bh + __PBP__ * 2)) AND (205-15> ( 0403h + __PBP__ * 2))
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	MOV A,0 
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	fcall __DELAYX6 + ( 040ah + __PBP__ * 2) -205-15
 158  0022              	ENDIF
"File: UART.c        Assembler  Version HGASM0202      Page 11

 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	IF (205-15 >= ( 040bh + __PBP__ * 2)) AND ((((205-15-( 9 + __PBP__ * 2))%0402h)/4+1)>256)
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	MOV A,(205-15-( 9 + __PBP__ * 2))/0402h
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	MOV _builtin_holtek_delay_2,A
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	MOV A,0
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	fcall __DELAYY5 +5- (((205-15-( 9 + __PBP__ * 2))%0402h)%6) 
 158  0022              	ENDIF
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	IF (205-15 >= ( 040bh + __PBP__ * 2)) AND ((((205-15-( 9 + __PBP__ * 2))%0402h)/4+1)<=256)
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	MOV A,(205-15-( 9 + __PBP__ * 2))/0402h
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	MOV _builtin_holtek_delay_2,A
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	MOV A,((205-15-( 9 + __PBP__ * 2))%0402h)/4+1
 158  0022              ;# 158 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 158  0022              	fcall __DELAYY3 +3-(((205-15-( 9 + __PBP__ * 2))%0402h)%4) 
 158  0022              	ENDIF
 158  0022  1780     E  	sdz rb
 158  0023  2800     R  	jmp _L18
 161  0024              #line 161 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 161  0024  0700     E  	mov a,ra
 161  0025  0003        	ret
 161  0026              _PC_RX endp
 161  0026              #line 161 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 161  0026              #pragma debug scope 1 1
 161  0026              public _rx_string
 161  0026              #pragma debug scope 9 1
 163  0026              #line 163 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 163  0000              _rx_string .section 'code'
 163  0000              _rx_string proc
 163  0000  0002[           local _rx_string_2 db 2 dup(?)	; 0,2
            00
            ]
 163  0002              #pragma debug variable 7 9 _rx_string_2+1 "w"
 163  0000  0F0A        	mov a,10
 163  0001  0080     R  	mov _rx_string_2[0],a
 165  0002              #line 165 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 165  0002  1F00     R  	clr _rx_string_2[1]
 165  0003              _L24:
 167  0003              #line 167 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 167  0003              	fcall _PC_RX
 167  000A  0080     E  	mov ra,a
 167  000B  3400     E  	clr ra.7
 167  000C  0700     R  	mov a,_rx_string_2[1]
 167  000D  0080     E  	mov rb,a
 167  000E  1F00     E  	clr rc
 167  000F  3F85        	sz acc.7
 167  0010  1F80     E  	set rc
 167  0011  0F00     R  	mov a,low offset _output
 167  0012  0300     E  	add a,rb
 167  0013  0083        	mov mp,a
 167  0014  0F00     R  	mov a,high offset _output
 167  0015  1300     E  	adc a,rc
 167  0016  0084        	mov sbp,a
 167  0017  0700     E  	mov a,ra
"File: UART.c        Assembler  Version HGASM0202      Page 12

 167  0018  0082        	mov ir,a
 168  0019              #line 168 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 168  0019  0700     E  	mov a,ra
 168  001A  0A0D        	sub a,13
 168  001B  3D0A        	sz z
 168  001C  2800     R  	jmp _L22
 165  001D              #line 165 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 165  001D  1480     R  	inc _rx_string_2[1]
 165  001E  1780     R  	sdz _rx_string_2[0]
 165  001F  2800     R  	jmp _L24
 165  0020              _L22:
 165  0020  0003        	ret
 165  0021              _rx_string endp
 165  0021              #line 165 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 165  0021              #pragma debug scope 1 1
 165  0021              public _PC_TX
 165  0021              #pragma debug scope 10 1
 172  0021              #line 172 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 172  0000              _PC_TX .section 'code'
 172  0000              _PC_TX proc
 172  0000  00              local _PC_TX_2 db 1 dup(?)	; 0,1
 172  0000  0080     R  	mov _PC_TX_2[0],a
 172  0001              #pragma debug variable 7 10 _PC_TX_2+0 "da"
 175  0001              #line 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 175  0001  3422        	clr [34].0
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF 205>263690
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	ERRMESSAGE 'the value 205of the argument exceeds the maxinum 263690'
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF 205<0
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	ERRMESSAGE 'the value 205 of the argument exceeds the mininum 0'
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF 205==0
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	JMP $
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205>=1) AND (205<( 4 + __PBP__ * 2))
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	NOP
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205>=2) AND (205<( 4 + __PBP__ * 2))
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	NOP
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205>=3) AND (205<( 4 + __PBP__ * 2))
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	NOP
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205>=4) AND (205<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	NOP
 175  0002              	ENDIF
"File: UART.c        Assembler  Version HGASM0202      Page 13

 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205>=5) AND (205<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	NOP
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205>=6) AND (205<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	NOP
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205>=7) AND (205<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	NOP
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205>=8) AND (205<( 4 + __PBP__ * 2))  AND ( __PBP__ > 2 )
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	NOP
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205==9)  AND ( __PBP__ > 2 )
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	NOP
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205< ( 8 + __PBP__ * 2)) AND (205>( 3 + __PBP__ * 2))
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	fcall __DELAY3 + ( 7 + __PBP__ * 2) -205
 175  0002              	ENDIF
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002              	IF (205< ( 0404h + __PBP__ * 2)) AND (205>( 7 + __PBP__ * 2))
 175  0002              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0002  0F31        	MOV A,(205-( 4 + __PBP__ * 2))/4
 175  0003              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  0003              	fcall __DELAYX3 + 3 -((205-( 4 + __PBP__ * 2)) MOD 4) 
 175  000A              	ENDIF
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	IF (205< ( 040bh + __PBP__ * 2)) AND (205> ( 0403h + __PBP__ * 2))
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	MOV A,0 
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	fcall __DELAYX6 + ( 040ah + __PBP__ * 2) -205
 175  000A              	ENDIF
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	IF (205 >= ( 040bh + __PBP__ * 2)) AND ((((205-( 9 + __PBP__ * 2))%0402h)/4+1)>256)
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	MOV A,(205-( 9 + __PBP__ * 2))/0402h
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	MOV _builtin_holtek_delay_2,A
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	MOV A,0
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	fcall __DELAYY5 +5- (((205-( 9 + __PBP__ * 2))%0402h)%6) 
 175  000A              	ENDIF
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	IF (205 >= ( 040bh + __PBP__ * 2)) AND ((((205-( 9 + __PBP__ * 2))%0402h)/4+1)<=256)
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	MOV A,(205-( 9 + __PBP__ * 2))/0402h
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
"File: UART.c        Assembler  Version HGASM0202      Page 14

 175  000A              	MOV _builtin_holtek_delay_2,A
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	MOV A,((205-( 9 + __PBP__ * 2))%0402h)/4+1
 175  000A              ;# 175 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 175  000A              	fcall __DELAYY3 +3-(((205-( 9 + __PBP__ * 2))%0402h)%4) 
 175  000A              	ENDIF
 175  000A  0F08        	mov a,8
 175  000B  0080     E  	mov ra,a
 175  000C              _L35:
 178  000C              #line 178 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 178  000C  3800     R  	snz _PC_TX_2[0].0
 178  000D  2800     R  	jmp _L32
 178  000E  3022        	set [34].0
 178  000F  2800     R  	jmp _L33
 178  0010              _L32:
 179  0010              #line 179 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 179  0010  3422        	clr [34].0
 179  0011              _L33:
 180  0011              #line 180 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 180  0011  1A00     R  	rlca _PC_TX_2[0]
 180  0012  1B80     R  	rrc _PC_TX_2[0]
 181  0013              #line 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF 205-15>263690
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	ERRMESSAGE 'the value 205-15of the argument exceeds the maxinum 263690'
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF 205-15<0
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	ERRMESSAGE 'the value 205-15 of the argument exceeds the mininum 0'
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF 205-15==0
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	JMP $
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15>=1) AND (205-15<( 4 + __PBP__ * 2))
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	NOP
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15>=2) AND (205-15<( 4 + __PBP__ * 2))
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	NOP
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15>=3) AND (205-15<( 4 + __PBP__ * 2))
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	NOP
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15>=4) AND (205-15<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	NOP
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15>=5) AND (205-15<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
"File: UART.c        Assembler  Version HGASM0202      Page 15

 181  0013              	NOP
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15>=6) AND (205-15<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	NOP
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15>=7) AND (205-15<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	NOP
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15>=8) AND (205-15<( 4 + __PBP__ * 2))  AND ( __PBP__ > 2 )
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	NOP
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15==9)  AND ( __PBP__ > 2 )
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	NOP
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15< ( 8 + __PBP__ * 2)) AND (205-15>( 3 + __PBP__ * 2))
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	fcall __DELAY3 + ( 7 + __PBP__ * 2) -205-15
 181  0013              	ENDIF
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013              	IF (205-15< ( 0404h + __PBP__ * 2)) AND (205-15>( 7 + __PBP__ * 2))
 181  0013              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0013  0F2D        	MOV A,(205-15-( 4 + __PBP__ * 2))/4
 181  0014              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  0014              	fcall __DELAYX3 + 3 -((205-15-( 4 + __PBP__ * 2)) MOD 4) 
 181  001B              	ENDIF
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	IF (205-15< ( 040bh + __PBP__ * 2)) AND (205-15> ( 0403h + __PBP__ * 2))
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	MOV A,0 
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	fcall __DELAYX6 + ( 040ah + __PBP__ * 2) -205-15
 181  001B              	ENDIF
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	IF (205-15 >= ( 040bh + __PBP__ * 2)) AND ((((205-15-( 9 + __PBP__ * 2))%0402h)/4+1)>256)
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	MOV A,(205-15-( 9 + __PBP__ * 2))/0402h
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	MOV _builtin_holtek_delay_2,A
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	MOV A,0
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	fcall __DELAYY5 +5- (((205-15-( 9 + __PBP__ * 2))%0402h)%6) 
 181  001B              	ENDIF
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	IF (205-15 >= ( 040bh + __PBP__ * 2)) AND ((((205-15-( 9 + __PBP__ * 2))%0402h)/4+1)<=256)
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	MOV A,(205-15-( 9 + __PBP__ * 2))/0402h
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	MOV _builtin_holtek_delay_2,A
 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	MOV A,((205-15-( 9 + __PBP__ * 2))%0402h)/4+1
"File: UART.c        Assembler  Version HGASM0202      Page 16

 181  001B              ;# 181 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 181  001B              	fcall __DELAYY3 +3-(((205-15-( 9 + __PBP__ * 2))%0402h)%4) 
 181  001B              	ENDIF
 181  001B  1780     E  	sdz ra
 181  001C  2800     R  	jmp _L35
 183  001D              #line 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 183  001D  3022        	set [34].0
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF 205>263690
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	ERRMESSAGE 'the value 205of the argument exceeds the maxinum 263690'
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF 205<0
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	ERRMESSAGE 'the value 205 of the argument exceeds the mininum 0'
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF 205==0
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	JMP $
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205>=1) AND (205<( 4 + __PBP__ * 2))
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	NOP
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205>=2) AND (205<( 4 + __PBP__ * 2))
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	NOP
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205>=3) AND (205<( 4 + __PBP__ * 2))
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	NOP
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205>=4) AND (205<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	NOP
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205>=5) AND (205<( 4 + __PBP__ * 2)) AND ( __PBP__ > 0 )
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	NOP
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205>=6) AND (205<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	NOP
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205>=7) AND (205<( 4 + __PBP__ * 2))  AND ( __PBP__ > 1 )
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	NOP
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205>=8) AND (205<( 4 + __PBP__ * 2))  AND ( __PBP__ > 2 )
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
"File: UART.c        Assembler  Version HGASM0202      Page 17

 183  001E              	NOP
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205==9)  AND ( __PBP__ > 2 )
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	NOP
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205< ( 8 + __PBP__ * 2)) AND (205>( 3 + __PBP__ * 2))
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	fcall __DELAY3 + ( 7 + __PBP__ * 2) -205
 183  001E              	ENDIF
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E              	IF (205< ( 0404h + __PBP__ * 2)) AND (205>( 7 + __PBP__ * 2))
 183  001E              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001E  0F31        	MOV A,(205-( 4 + __PBP__ * 2))/4
 183  001F              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  001F              	fcall __DELAYX3 + 3 -((205-( 4 + __PBP__ * 2)) MOD 4) 
 183  0026              	ENDIF
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	IF (205< ( 040bh + __PBP__ * 2)) AND (205> ( 0403h + __PBP__ * 2))
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	MOV A,0 
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	fcall __DELAYX6 + ( 040ah + __PBP__ * 2) -205
 183  0026              	ENDIF
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	IF (205 >= ( 040bh + __PBP__ * 2)) AND ((((205-( 9 + __PBP__ * 2))%0402h)/4+1)>256)
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	MOV A,(205-( 9 + __PBP__ * 2))/0402h
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	MOV _builtin_holtek_delay_2,A
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	MOV A,0
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	fcall __DELAYY5 +5- (((205-( 9 + __PBP__ * 2))%0402h)%6) 
 183  0026              	ENDIF
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	IF (205 >= ( 040bh + __PBP__ * 2)) AND ((((205-( 9 + __PBP__ * 2))%0402h)/4+1)<=256)
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	MOV A,(205-( 9 + __PBP__ * 2))/0402h
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	MOV _builtin_holtek_delay_2,A
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	MOV A,((205-( 9 + __PBP__ * 2))%0402h)/4+1
 183  0026              ;# 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c" 1
 183  0026              	fcall __DELAYY3 +3-(((205-( 9 + __PBP__ * 2))%0402h)%4) 
 183  0026              	ENDIF
 183  0026  0003        	ret
 183  0027              _PC_TX endp
 183  0027              #line 183 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 183  0027              #pragma debug scope 1 1
 183  0027              public _tx_string
 183  0027              #pragma debug scope 11 1
 186  0027              #line 186 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 186  0000              _tx_string .section 'code'
 186  0000              _tx_string proc
 186  0000              public _tx_string_2
 186  0000  0004[           local _tx_string_2 db 4 dup(?)	; 2,2
            00
"File: UART.c        Assembler  Version HGASM0202      Page 18

            ]
 186  0004              #pragma debug pointer 42 7 11
 186  0004              #pragma debug pointer 42 7 11
 186  0004              #pragma debug variable 42 11 _tx_string_2+0 "data"
 186  0004              #pragma debug variable 7 11 _tx_string_2+3 "test"
 186  0000  0F09        	mov a,9
 186  0001  0080     R  	mov _tx_string_2[2],a
 188  0002              #line 188 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 188  0002  1F00     R  	clr _tx_string_2[3]
 188  0003              _L38:
 190  0003              #line 190 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 190  0003  0700     R  	mov a,_tx_string_2[3]
 190  0004  0080     E  	mov rb,a
 190  0005  1F00     E  	clr rc
 190  0006  3F85        	sz acc.7
 190  0007  1F80     E  	set rc
 190  0008  0700     E  	mov a,rb
 190  0009  0300     R  	add a,_tx_string_2[0]
 190  000A  0083        	mov mp,a
 190  000B  0700     E  	mov a,rc
 190  000C  1300     R  	adc a,_tx_string_2[1]
 190  000D  0084        	mov sbp,a
 190  000E              	fcall _Crom2Prom
 190  0015              	fcall _PC_TX
 188  001C              #line 188 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 188  001C  1480     R  	inc _tx_string_2[3]
 188  001D  1780     R  	sdz _tx_string_2[2]
 188  001E  2800     R  	jmp _L38
 188  001F  0003        	ret
 188  0020              _tx_string endp
 188  0020              #line 188 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 188  0020              #pragma debug scope 1 1
 188  0020              ___wdtc equ [62]
 188  0020              ___pcc equ [27]
 188  0020              ___adcr0 equ [104]
 188  0020              ___adcr1 equ [105]
 188  0020              ___pas0 equ [352]
 188  0020              ___intc1 equ [49]
 188  0020              ___intc0 equ [48]
 188  0000              @crom	.section 'crom'
 188  0000              _LC0:
 188  0000              	db 04eh,04fh,020h,073h,069h,067h,06eh,06ch,021h,00h
 188  0005              public _main
 188  0005              #pragma debug scope 12 1
  32  0005              #line 32 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  32  0005              IFDEF WITH_DEFAULT_STARTUP
  32  0005              extern _main_initial0:near
  32  0005              extern _main_startup:near
  32  0005              ENDIF
  32  0005              
  32  0005              ROMBANK 0 @start
  32  0000              @start .section com_l 'code'
  32  0000              _main_startup1:
  32  0000              @start .section com_e 'code'
  32  0000  0F00     R  	mov a,bank _main
  32  0001  008B        	mov bp,a
  32  0002  2800     R  	jmp _main
  32  0003              
  32  0000              _main .section 'code'
  32  0000              _main proc
"File: UART.c        Assembler  Version HGASM0202      Page 19

  32  0000  0002[           local _main_2 db 2 dup(?)
            00
            ]
  34  0000              #line 34 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  34  0000              	fcall _UART_init
  36  0007              #line 36 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  36  0007  0FAF        	mov a,175
  36  0008  00BE        	mov [62],a
  37  0009              #line 37 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  37  0009  1F1B        	clr [27]
  38  000A              #line 38 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  38  000A  0F01        	mov a,1
  38  000B  00E8        	mov [104],a
  39  000C              #line 39 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  39  000C  0F06        	mov a,6
  39  000D  00E9        	mov [105],a
  40  000E              #line 40 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  40  000E  0F30        	mov a,48
  40  000F  80E0 0001   	lmov [352],a
  41  0011              #line 41 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  41  0011  31B1        	set [49].3
  41  0012  3030        	set [48].0
  41  0013              _L49:
  48  0013              #line 48 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  48  0013              	fcall _PC_RX
  51  001A              #line 51 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  51  001A  33E8        	set [104].7
  52  001B              #line 52 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  52  001B  37E8        	clr [104].7
  53  001C              #line 53 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  53  001C  0FE8        	mov a,-24
  53  001D  0080     R  	mov _Delay100us_2[0],a
  53  001E  0F03        	mov a,3
  53  001F  0080     R  	mov _Delay100us_2[1],a
  53  0020              	fcall _Delay100us
  56  0027              #line 56 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  56  0027  071A        	mov a,[26]
  56  0028  0E01        	and a,1
  56  0029  0080     E  	mov rb,a
  55  002A              #line 55 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  55  002A  1F00     E  	clr rc
  60  002B              #line 60 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  60  002B  389A        	snz [26].1
  60  002C  2800     R  	jmp _L40
  62  002D              #line 62 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  62  002D  0F02        	mov a,2
  62  002E  0380     E  	addm a,rb
  62  002F  0F00        	mov a,0
  62  0030  1380     E  	adcm a,rc
  62  0031              _L40:
  64  0031              #line 64 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  64  0031  391A        	snz [26].2
  64  0032  2800     R  	jmp _L41
  66  0033              #line 66 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  66  0033  0F04        	mov a,4
  66  0034  0380     E  	addm a,rb
  66  0035  0F00        	mov a,0
  66  0036  1380     E  	adcm a,rc
  66  0037              _L41:
  68  0037              #line 68 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
"File: UART.c        Assembler  Version HGASM0202      Page 20

  68  0037  399A        	snz [26].3
  68  0038  2800     R  	jmp _L42
  70  0039              #line 70 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  70  0039  0F08        	mov a,8
  70  003A  0380     E  	addm a,rb
  70  003B  0F00        	mov a,0
  70  003C  1380     E  	adcm a,rc
  70  003D              _L42:
  72  003D              #line 72 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  72  003D  3A1A        	snz [26].4
  72  003E  2800     R  	jmp _L43
  74  003F              #line 74 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  74  003F  0F10        	mov a,16
  74  0040  0380     E  	addm a,rb
  74  0041  0F00        	mov a,0
  74  0042  1380     E  	adcm a,rc
  74  0043              _L43:
  76  0043              #line 76 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  76  0043  3A9A        	snz [26].5
  76  0044  2800     R  	jmp _L44
  78  0045              #line 78 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  78  0045  0F20        	mov a,32
  78  0046  0380     E  	addm a,rb
  78  0047  0F00        	mov a,0
  78  0048  1380     E  	adcm a,rc
  78  0049              _L44:
  80  0049              #line 80 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  80  0049  3B1A        	snz [26].6
  80  004A  2800     R  	jmp _L45
  82  004B              #line 82 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  82  004B  0F40        	mov a,64
  82  004C  0380     E  	addm a,rb
  82  004D  0F00        	mov a,0
  82  004E  1380     E  	adcm a,rc
  82  004F              _L45:
  84  004F              #line 84 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  84  004F  3B9A        	snz [26].7
  84  0050  2800     R  	jmp _L46
  86  0051              #line 86 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  86  0051  0F80        	mov a,128
  86  0052  0380     E  	addm a,rb
  86  0053  0F00        	mov a,0
  86  0054  1380     E  	adcm a,rc
  86  0055  2800     R  	jmp _L47
  86  0056              _L46:
  89  0056              #line 89 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  89  0056  0700     E  	mov a,rb
  89  0057  0C6F        	xor a,111
  89  0058  0500     E  	or a,rc
  89  0059  390A        	snz z
  89  005A  2800     R  	jmp _L47
  91  005B              #line 91 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  91  005B  0F00     R  	mov a,low offset _LC0
  91  005C  0080     R  	mov _tx_string_2[0],a
  91  005D  0F00     R  	mov a,high offset _LC0
  91  005E  0080     R  	mov _tx_string_2[1],a
  91  005F              	fcall _tx_string
  91  0066  2800     R  	jmp _L68
  91  0067              _L47:
  97  0067              #line 97 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
"File: UART.c        Assembler  Version HGASM0202      Page 21

  97  0067  0700     E  	mov a,rb  
  97  0068  0080     E  	mov _builtin_holtek_udivmodhi4_2[0],a  
  97  0069  0700     E  	mov a,rc  
  97  006A  0080     E  	mov _builtin_holtek_udivmodhi4_2[1],a
  97  006B  0F64        	mov a,100  
  97  006C  0080     E  	mov _builtin_holtek_udivmodhi4_2[2],a  
  97  006D  0F00        	mov a,0  
  97  006E  0080     E  	mov _builtin_holtek_udivmodhi4_2[3],a
  97  006F              	fcall _builtin_holtek_divmodhi4
  97  0076  0700     E  	mov a,_builtin_holtek_udivmodhi4_2[4]  
  97  0077  0080     R  	mov _main_2[0],a  
  97  0078  0700     E  	mov a,_builtin_holtek_udivmodhi4_2[5]  
  97  0079  0080     R  	mov _main_2[1],a
  96  007A              #line 96 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  96  007A  0700     E  	mov a,rb  
  96  007B  0080     E  	mov _builtin_holtek_udivmodhi4_2[0],a  
  96  007C  0700     E  	mov a,rc  
  96  007D  0080     E  	mov _builtin_holtek_udivmodhi4_2[1],a
  96  007E  0F64        	mov a,100  
  96  007F  0080     E  	mov _builtin_holtek_udivmodhi4_2[2],a  
  96  0080  0F00        	mov a,0  
  96  0081  0080     E  	mov _builtin_holtek_udivmodhi4_2[3],a
  96  0082              	fcall _builtin_holtek_divmodhi4
  96  0089  0700     E  	mov a,_builtin_holtek_udivmodhi4_2[0]  
  96  008A  0080     E  	mov rb,a  
  96  008B  0700     E  	mov a,_builtin_holtek_udivmodhi4_2[1]  
  96  008C  0080     E  	mov rc,a
  96  008D  0F30        	mov a,48
  96  008E  0380     E  	addm a,rb
 103  008F              #line 103 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 103  008F  0700     E  	mov a,rb
 103  0090              	fcall _PC_TX
 104  0097              #line 104 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 104  0097  0FE8        	mov a,-24
 104  0098  0080     R  	mov _Delay100us_2[0],a
 104  0099  0F03        	mov a,3
 104  009A  0080     R  	mov _Delay100us_2[1],a
 104  009B              	fcall _Delay100us
  98  00A2              #line 98 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  98  00A2  0700     R  	mov a,_main_2[0]  
  98  00A3  0080     E  	mov _builtin_holtek_udivmodhi4_2[0],a  
  98  00A4  0700     R  	mov a,_main_2[1]  
  98  00A5  0080     E  	mov _builtin_holtek_udivmodhi4_2[1],a
  98  00A6  0F0A        	mov a,10  
  98  00A7  0080     E  	mov _builtin_holtek_udivmodhi4_2[2],a  
  98  00A8  0F00        	mov a,0  
  98  00A9  0080     E  	mov _builtin_holtek_udivmodhi4_2[3],a
  98  00AA              	fcall _builtin_holtek_divmodhi4
  98  00B1  0700     E  	mov a,_builtin_holtek_udivmodhi4_2[0]  
  98  00B2  0080     E  	mov rb,a  
  98  00B3  0700     E  	mov a,_builtin_holtek_udivmodhi4_2[1]  
  98  00B4  0080     E  	mov rc,a
  98  00B5  0F30        	mov a,48
  98  00B6  0380     E  	addm a,rb
 105  00B7              #line 105 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 105  00B7  0700     E  	mov a,rb
 105  00B8              	fcall _PC_TX
 106  00BF              #line 106 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 106  00BF  0FE8        	mov a,-24
 106  00C0  0080     R  	mov _Delay100us_2[0],a
"File: UART.c        Assembler  Version HGASM0202      Page 22

 106  00C1  0F03        	mov a,3
 106  00C2  0080     R  	mov _Delay100us_2[1],a
 106  00C3              	fcall _Delay100us
  99  00CA              #line 99 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  99  00CA  0700     R  	mov a,_main_2[0]  
  99  00CB  0080     E  	mov _builtin_holtek_udivmodhi4_2[0],a  
  99  00CC  0700     R  	mov a,_main_2[1]  
  99  00CD  0080     E  	mov _builtin_holtek_udivmodhi4_2[1],a
  99  00CE  0F0A        	mov a,10  
  99  00CF  0080     E  	mov _builtin_holtek_udivmodhi4_2[2],a  
  99  00D0  0F00        	mov a,0  
  99  00D1  0080     E  	mov _builtin_holtek_udivmodhi4_2[3],a
  99  00D2              	fcall _builtin_holtek_divmodhi4
  99  00D9  0700     E  	mov a,_builtin_holtek_udivmodhi4_2[4]  
  99  00DA  0080     E  	mov rb,a  
  99  00DB  0700     E  	mov a,_builtin_holtek_udivmodhi4_2[5]  
  99  00DC  0080     E  	mov rc,a
 100  00DD              #line 100 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 100  00DD  0F30        	mov a,48
 100  00DE  0380     E  	addm a,rb
 107  00DF              #line 107 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 107  00DF  0700     E  	mov a,rb
 107  00E0              	fcall _PC_TX
 108  00E7              #line 108 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 108  00E7  0FE8        	mov a,-24
 108  00E8  0080     R  	mov _Delay100us_2[0],a
 108  00E9  0F03        	mov a,3
 108  00EA  0080     R  	mov _Delay100us_2[1],a
 108  00EB              	fcall _Delay100us
 109  00F2              #line 109 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 109  00F2  0F41        	mov a,65
 109  00F3              	fcall _PC_TX
 109  00FA              _L68:
 110  00FA              #line 110 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 110  00FA  0F0D        	mov a,13
 110  00FB              	fcall _PC_TX
 115  0102              #line 115 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 115  0102  0FE8        	mov a,-24
 115  0103  0080     R  	mov _Delay100us_2[0],a
 115  0104  0F03        	mov a,3
 115  0105  0080     R  	mov _Delay100us_2[1],a
 115  0106              	fcall _Delay100us
 116  010D              #line 116 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 116  010D  2800     R  	jmp _L49
 116  010E  2800     R  	jmp $
 116  010F              _main endp
 116  010F              
 116  010F              @dummy endp
 116  010F              
 116  010F              #line 116 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
 116  010F              #pragma debug scope 1 1
  23  010F              #line 23 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  23  010F              public _output
  23  0000              @HCCINIT0_output .section 'data'
  23  0000  0032[       _output	db 50 dup(0)
            00
            ]
  23  0032              #pragma debug array 43 7 50 1
  23  0032              #pragma debug array 43 7 50 1
  23  0032              #pragma debug variable 43 1 _output "output"
"File: UART.c        Assembler  Version HGASM0202      Page 23

  23  0032              
  23  0000              @HCCINIT .section 'data'
  23  0000              public _output1
  23  0000              @HCCINIT	.section 'data'
  19  0000              #line 19 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  19  0000              @HCCINIT_output1 .section 'data'
  19  0000              _output1 label byte
  19  0000              #pragma debug array 44 7 4 1
  19  0000              #pragma debug array 44 7 4 1
  19  0000              #pragma debug variable 44 1 _output1 "output1"
  19  0000              	db 48
  19  0000              @ROMDATA_BASE .section inpage 'code'
  19  0000              	db 48
  19  0001              @HCCINIT_output1 .section 'data'
  19  0001              	db 49
  19  0001              @ROMDATA_BASE .section inpage 'code'
  19  0001              	db 49
  19  0002              @HCCINIT_output1 .section 'data'
  19  0002              	db 0
  19  0001              @ROMDATA_BASE .section inpage 'code'
  19  0001              	db 0
  19  0003              @HCCINIT_output1 .section 'data'
  19  0003              	db 0
  19  0002              @ROMDATA_BASE .section inpage 'code'
  19  0002              	db 0
  19  0004              @HCCINIT_output1 .section 'data'
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug variable 46 1 ___pc "__pc" 1
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug variable 48 1 ___pcc "__pcc" 1
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug variable 50 1 ___pe "__pe" 1
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug variable 52 1 ___pec "__pec" 1
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug variable 54 1 ___intc0 "__intc0" 1
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug variable 56 1 ___intc1 "__intc1" 1
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
"File: UART.c        Assembler  Version HGASM0202      Page 24

  19  0004              #pragma debug variable 58 1 ___wdtc "__wdtc" 1
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug variable 60 1 ___adcr0 "__adcr0" 1
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug variable 62 1 ___adcr1 "__adcr1" 1
  19  0004              #pragma debug variable 8 1 ___adrh "__adrh" 1
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug struct_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug union_end
  19  0004              #pragma debug variable 64 1 ___pas0 "__pas0" 1
  19  0004              extern r1:byte
  19  0004              extern r2:byte
  19  0004              extern r3:byte
  32  0004              #line 32 "C:\Users\bet\Desktop\ADC轉換顯示\UART.c"
  32  0000              @code .section at 0 'code'
  32  0000  1F0B        	clr bp
  32  0001  2800     R  	jmp _main_startup1
  32  0002              
  32  0002              extern _builtin_holtek_divmodhi4:near
  32  0002              extern _builtin_holtek_udivmodhi4_2:byte
  32  0002              extern _builtin_holtek_udivmodhi4:near
  32  0002              
  32  0002              ; 
  32  0002              ; Generated by holtek-gcc v3.13, Mon Nov 14 13:47:08 2016
  32  0002              ; Rebuild 71
  32  0002              ; end of file


        0 Errors, 0